# Requirements: Nodes with nested virtualization support + KVM
# GCP:
# Compute Engine VM with nested virtualization support (for example N2D, N2, C2, C3, M2) with Nested virtualization enabled (--enable-nested-virtualization) - for example c3-standard-4	
# Image: Ubuntu with containerd (ubuntu_containerd)
# Enable nested virtualization: --enable-nested-virtualization (or Nodes->Advanced->Enable nested virtualization in Console)
# tolerations - so only specific workflows are scheduled at these nodes
apiVersion: testworkflows.testkube.io/v1
kind: TestWorkflow
metadata:
  name: espresso-android-workflow
description: "Android emulator - K8s+KVM"
spec:
  content:
    git:
      uri: https://github.com/kubeshop/testkube
      revision: main
      paths:
        - test/espresso/example-project
  services:
    emulator:
      count: 1
      timeout: 120s
      logs: 'always'
      image: us-docker.pkg.dev/android-emulator-268719/images/30-google-x64:30.1.2
      resources:
        requests:
          cpu: 2
          memory: 3Gi
      securityContext: # privilaged mode is required for KVM
        privileged: true
      volumeMounts: # KVM volumeMounts
        - name: kvm
          mountPath: /dev/kvm
      readinessProbe:
        tcpSocket:
          port: 5555
        periodSeconds: 2
      pod:
        volumes:
        - name: kvm # KVM Volume
          hostPath:
            path: /dev/kvm
            type: CharDevice
        tolerations: # schedule only at nodes with `kvm-support=true`
        - key: "kvm-support"
          value: "true"
          effect: "NoSchedule"
  steps:
    - name: Build APKs
      container:
        image: gradle:8.7-jdk17
        workingDir: /data/repo/test/espresso/example-project
        resources:
          requests:
            cpu: 2
            memory: 4Gi
      shell: |
        apt-get update && \
        apt-get install -y wget unzip && \
        wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip && \
        mkdir -p /sdk/cmdline-tools && \
        unzip commandlinetools-linux-11076708_latest.zip -d /sdk/cmdline-tools && \
        mv /sdk/cmdline-tools/cmdline-tools /sdk/cmdline-tools/latest && \
        yes | /sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=/sdk "platform-tools" "platforms;android-34" "build-tools;34.0.0" "emulator" && \
        export ANDROID_SDK_ROOT=/sdk && \
        ./gradlew assembleDebug assembleAndroidTest
      artifacts: # Saving APKs as artifacts (optional)
        paths:
          - app/build/outputs/apk/debug/app-debug.apk
          - app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

    - name: Run Espresso tests
      container:
        image: devicefarmer/adb
        workingDir: /data/repo/test/espresso/example-project
        resources:
          requests:
            cpu: 1
            memory: 1Gi
      shell: |
        echo "Connect to emulator"
        adb connect {{services.emulator.0.ip}}:5555

        echo "Waiting for system to boot"
        echo "Waiting for ADB to become available"
        for i in $(seq 1 60); do
          echo "iteration $i"
          adb wait-for-device && break
          sleep 5
        done

        echo "Waiting for system boot (sys.boot_completed)"
        for i in $(seq 1 60); do
          echo "iteration $i"
          [ "$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')" = "1" ] && break
          sleep 5
        done

        echo "Waiting for package manager service to be available"
        for i in $(seq 1 60); do
          echo "iteration $i"
          adb shell pm list packages && break
          sleep 5
        done

        echo "Install apk"
        adb install app/build/outputs/apk/debug/app-debug.apk
        adb install app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
        echo "Run test"
        adb shell am instrument -w -e debug false com.example.exampleproject.test/androidx.test.runner.AndroidJUnitRunner