// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/imageinspector (interfaces: StorageWithTransfer)
//
// Generated by this command:
//
//	mockgen -destination=./mock_storage.go -package=imageinspector github.com/kubeshop/testkube/pkg/imageinspector StorageWithTransfer
//

// Package imageinspector is a generated GoMock package.
package imageinspector

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageWithTransfer is a mock of StorageWithTransfer interface.
type MockStorageWithTransfer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageWithTransferMockRecorder
	isgomock struct{}
}

// MockStorageWithTransferMockRecorder is the mock recorder for MockStorageWithTransfer.
type MockStorageWithTransferMockRecorder struct {
	mock *MockStorageWithTransfer
}

// NewMockStorageWithTransfer creates a new mock instance.
func NewMockStorageWithTransfer(ctrl *gomock.Controller) *MockStorageWithTransfer {
	mock := &MockStorageWithTransfer{ctrl: ctrl}
	mock.recorder = &MockStorageWithTransferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageWithTransfer) EXPECT() *MockStorageWithTransferMockRecorder {
	return m.recorder
}

// CopyTo mocks base method.
func (m *MockStorageWithTransfer) CopyTo(ctx context.Context, other ...StorageTransfer) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range other {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyTo", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockStorageWithTransferMockRecorder) CopyTo(ctx any, other ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, other...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockStorageWithTransfer)(nil).CopyTo), varargs...)
}

// Get mocks base method.
func (m *MockStorageWithTransfer) Get(ctx context.Context, request RequestBase) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageWithTransferMockRecorder) Get(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageWithTransfer)(nil).Get), ctx, request)
}

// Store mocks base method.
func (m *MockStorageWithTransfer) Store(ctx context.Context, request RequestBase, info Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, request, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockStorageWithTransferMockRecorder) Store(ctx, request, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStorageWithTransfer)(nil).Store), ctx, request, info)
}

// StoreMany mocks base method.
func (m *MockStorageWithTransfer) StoreMany(ctx context.Context, data map[Hash]Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMany", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMany indicates an expected call of StoreMany.
func (mr *MockStorageWithTransferMockRecorder) StoreMany(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMany", reflect.TypeOf((*MockStorageWithTransfer)(nil).StoreMany), ctx, data)
}
