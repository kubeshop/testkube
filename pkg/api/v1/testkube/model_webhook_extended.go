/*
 * Testkube API
 *
 * Testkube provides a Kubernetes-native framework for test definition, execution and results
 *
 * API version: 1.0.0
 * Contact: testkube@kubeshop.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package testkube

import (
	"fmt"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/kubeshop/testkube/pkg/utils"
	"gopkg.in/yaml.v3"
)

type Webhooks []Webhook

func (list Webhooks) Table() (header []string, output [][]string) {
	header = []string{"Name", "URI", "Events", "Selector", "Labels", "Disabled"}

	for _, e := range list {
		output = append(output, []string{
			e.Name,
			e.Uri,
			fmt.Sprintf("%v", e.Events),
			e.Selector,
			MapToString(e.Labels),
			fmt.Sprint(e.Disabled),
		})
	}

	return
}

func (w Webhook) GetName() string {
	return w.Name
}

func (w Webhook) GetNamespace() string {
	return w.Namespace
}

func (w Webhook) GetLabels() map[string]string {
	return w.Labels
}

func (w Webhook) GetAnnotations() map[string]string {
	return w.Annotations
}

func (w *Webhook) QuoteTextFields() {
	if w.PayloadTemplate != "" {
		w.PayloadTemplate, _ = printPayloadTemplate(w.PayloadTemplate)
	}

	for key, val := range w.Config {
		if val.Value != nil && val.Value.Value != "" {
			val.Value.Value = fmt.Sprintf("%q", val.Value.Value)
		}
		w.Config[key] = val
	}

	for key, value := range w.Parameters {
		if value.Description != "" {
			value.Description = fmt.Sprintf("%q", value.Description)
		}

		if value.Example != "" {
			value.Example = fmt.Sprintf("%q", value.Example)
		}

		if value.Default_ != nil && value.Default_.Value != "" {
			value.Pattern = fmt.Sprintf("%q", value.Pattern)
		}

		if value.Pattern != "" {
			value.Pattern = fmt.Sprintf("%q", value.Pattern)
		}

		w.Parameters[key] = value
	}
}

func printPayloadTemplate(text string) (string, error) {
	data := struct {
		PayloadTemplate string `yaml:"payloadTemplate"`
	}{PayloadTemplate: text}
	yamlData, err := yaml.Marshal(&data)
	if err != nil {
		return "", err
	}

	return string(yamlData), nil
}

func (w *Webhook) Equals(other *Webhook) bool {
	// Avoid check when there is one existing and the other one not
	if (w == nil) != (other == nil) {
		return false
	}

	// Reset timestamps to avoid influence
	wCreated := w.Created
	otherCreated := other.Created
	w.Created = time.Time{}
	other.Created = time.Time{}

	// Compare
	result := cmp.Equal(w, other)

	// Restore values
	w.Created = wCreated
	other.Created = otherCreated

	return result
}

func (w *Webhook) ConvertDots(fn func(string) string) *Webhook {
	if w == nil {
		return w
	}

	if w.Labels != nil {
		w.Labels = convertDotsInMap(w.Labels, fn)
	}
	if w.Annotations != nil {
		w.Annotations = convertDotsInMap(w.Annotations, fn)
	}
	if w.Headers != nil {
		w.Headers = convertDotsInMap(w.Headers, fn)
	}
	if w.Config != nil {
		w.Config = convertDotsInMap(w.Config, fn)
	}

	return w
}

func (w *Webhook) EscapeDots() *Webhook {
	return w.ConvertDots(utils.EscapeDots)
}

func (w *Webhook) UnscapeDots() *Webhook {
	return w.ConvertDots(utils.UnescapeDots)
}
