// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/kubeshop/testkube/pkg/api/v1/testkube"
)

type ExecutionSequence struct {
	Name           string             `db:"name" json:"name"`
	Number         int32              `db:"number" json:"number"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	OrganizationID string             `db:"organization_id" json:"organization_id"`
	EnvironmentID  string             `db:"environment_id" json:"environment_id"`
}

type Lease struct {
	ID         string             `db:"id" json:"id"`
	Identifier string             `db:"identifier" json:"identifier"`
	ClusterID  string             `db:"cluster_id" json:"cluster_id"`
	AcquiredAt pgtype.Timestamptz `db:"acquired_at" json:"acquired_at"`
	RenewedAt  pgtype.Timestamptz `db:"renewed_at" json:"renewed_at"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type TestWorkflow struct {
	ID           int32                               `db:"id" json:"id"`
	ExecutionID  string                              `db:"execution_id" json:"execution_id"`
	WorkflowType string                              `db:"workflow_type" json:"workflow_type"`
	Name         pgtype.Text                         `db:"name" json:"name"`
	Namespace    pgtype.Text                         `db:"namespace" json:"namespace"`
	Description  pgtype.Text                         `db:"description" json:"description"`
	Labels       map[string]string                   `db:"labels" json:"labels"`
	Annotations  map[string]string                   `db:"annotations" json:"annotations"`
	Created      pgtype.Timestamptz                  `db:"created" json:"created"`
	Updated      pgtype.Timestamptz                  `db:"updated" json:"updated"`
	Spec         *testkube.TestWorkflowSpec          `db:"spec" json:"spec"`
	ReadOnly     pgtype.Bool                         `db:"read_only" json:"read_only"`
	Status       *testkube.TestWorkflowStatusSummary `db:"status" json:"status"`
	CreatedAt    pgtype.Timestamptz                  `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz                  `db:"updated_at" json:"updated_at"`
}

type TestWorkflowExecution struct {
	ID                        string                                               `db:"id" json:"id"`
	GroupID                   pgtype.Text                                          `db:"group_id" json:"group_id"`
	RunnerID                  pgtype.Text                                          `db:"runner_id" json:"runner_id"`
	RunnerTarget              *testkube.ExecutionTarget                            `db:"runner_target" json:"runner_target"`
	RunnerOriginalTarget      *testkube.ExecutionTarget                            `db:"runner_original_target" json:"runner_original_target"`
	Name                      string                                               `db:"name" json:"name"`
	Namespace                 pgtype.Text                                          `db:"namespace" json:"namespace"`
	Number                    pgtype.Int4                                          `db:"number" json:"number"`
	ScheduledAt               pgtype.Timestamptz                                   `db:"scheduled_at" json:"scheduled_at"`
	AssignedAt                pgtype.Timestamptz                                   `db:"assigned_at" json:"assigned_at"`
	StatusAt                  pgtype.Timestamptz                                   `db:"status_at" json:"status_at"`
	TestWorkflowExecutionName pgtype.Text                                          `db:"test_workflow_execution_name" json:"test_workflow_execution_name"`
	DisableWebhooks           pgtype.Bool                                          `db:"disable_webhooks" json:"disable_webhooks"`
	Tags                      map[string]string                                    `db:"tags" json:"tags"`
	RunningContext            *testkube.TestWorkflowRunningContext                 `db:"running_context" json:"running_context"`
	ConfigParams              map[string]testkube.TestWorkflowExecutionConfigValue `db:"config_params" json:"config_params"`
	CreatedAt                 pgtype.Timestamptz                                   `db:"created_at" json:"created_at"`
	UpdatedAt                 pgtype.Timestamptz                                   `db:"updated_at" json:"updated_at"`
	OrganizationID            string                                               `db:"organization_id" json:"organization_id"`
	EnvironmentID             string                                               `db:"environment_id" json:"environment_id"`
	Runtime                   *testkube.TestWorkflowExecutionRuntime               `db:"runtime" json:"runtime"`
}

type TestWorkflowOutput struct {
	ID          int32                  `db:"id" json:"id"`
	ExecutionID string                 `db:"execution_id" json:"execution_id"`
	Ref         pgtype.Text            `db:"ref" json:"ref"`
	Name        pgtype.Text            `db:"name" json:"name"`
	Value       map[string]interface{} `db:"value" json:"value"`
	CreatedAt   pgtype.Timestamptz     `db:"created_at" json:"created_at"`
}

type TestWorkflowReport struct {
	ID          int32                               `db:"id" json:"id"`
	ExecutionID string                              `db:"execution_id" json:"execution_id"`
	Ref         pgtype.Text                         `db:"ref" json:"ref"`
	Kind        pgtype.Text                         `db:"kind" json:"kind"`
	File        pgtype.Text                         `db:"file" json:"file"`
	Summary     *testkube.TestWorkflowReportSummary `db:"summary" json:"summary"`
	CreatedAt   pgtype.Timestamptz                  `db:"created_at" json:"created_at"`
}

type TestWorkflowResourceAggregation struct {
	ExecutionID string                                                                   `db:"execution_id" json:"execution_id"`
	Global      map[string]map[string]testkube.TestWorkflowExecutionResourceAggregations `db:"global" json:"global"`
	Step        []testkube.TestWorkflowExecutionStepResourceAggregations                 `db:"step" json:"step"`
	CreatedAt   pgtype.Timestamptz                                                       `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz                                                       `db:"updated_at" json:"updated_at"`
}

type TestWorkflowResult struct {
	ExecutionID     string                                     `db:"execution_id" json:"execution_id"`
	Status          pgtype.Text                                `db:"status" json:"status"`
	PredictedStatus pgtype.Text                                `db:"predicted_status" json:"predicted_status"`
	QueuedAt        pgtype.Timestamptz                         `db:"queued_at" json:"queued_at"`
	StartedAt       pgtype.Timestamptz                         `db:"started_at" json:"started_at"`
	FinishedAt      pgtype.Timestamptz                         `db:"finished_at" json:"finished_at"`
	Duration        pgtype.Text                                `db:"duration" json:"duration"`
	TotalDuration   pgtype.Text                                `db:"total_duration" json:"total_duration"`
	DurationMs      pgtype.Int4                                `db:"duration_ms" json:"duration_ms"`
	PausedMs        pgtype.Int4                                `db:"paused_ms" json:"paused_ms"`
	TotalDurationMs pgtype.Int4                                `db:"total_duration_ms" json:"total_duration_ms"`
	Pauses          []testkube.TestWorkflowPause               `db:"pauses" json:"pauses"`
	Initialization  *testkube.TestWorkflowStepResult           `db:"initialization" json:"initialization"`
	Steps           map[string]testkube.TestWorkflowStepResult `db:"steps" json:"steps"`
	CreatedAt       pgtype.Timestamptz                         `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz                         `db:"updated_at" json:"updated_at"`
}

type TestWorkflowSignature struct {
	ID          int32              `db:"id" json:"id"`
	ExecutionID string             `db:"execution_id" json:"execution_id"`
	Ref         pgtype.Text        `db:"ref" json:"ref"`
	Name        pgtype.Text        `db:"name" json:"name"`
	Category    pgtype.Text        `db:"category" json:"category"`
	Optional    pgtype.Bool        `db:"optional" json:"optional"`
	Negative    pgtype.Bool        `db:"negative" json:"negative"`
	ParentID    pgtype.Int4        `db:"parent_id" json:"parent_id"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
}
