// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/cronjob (interfaces: Interface)

// Package cronjob is a generated GoMock package.
package cronjob

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockInterface) Reconcile(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reconcile", arg0)
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockInterfaceMockRecorder) Reconcile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockInterface)(nil).Reconcile), arg0)
}

// ReconcileTestSuites mocks base method.
func (m *MockInterface) ReconcileTestSuites(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTestSuites", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTestSuites indicates an expected call of ReconcileTestSuites.
func (mr *MockInterfaceMockRecorder) ReconcileTestSuites(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTestSuites", reflect.TypeOf((*MockInterface)(nil).ReconcileTestSuites), arg0)
}

// ReconcileTestWorkflowTemplates mocks base method.
func (m *MockInterface) ReconcileTestWorkflowTemplates(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTestWorkflowTemplates", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTestWorkflowTemplates indicates an expected call of ReconcileTestWorkflowTemplates.
func (mr *MockInterfaceMockRecorder) ReconcileTestWorkflowTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTestWorkflowTemplates", reflect.TypeOf((*MockInterface)(nil).ReconcileTestWorkflowTemplates), arg0)
}

// ReconcileTestWorkflows mocks base method.
func (m *MockInterface) ReconcileTestWorkflows(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTestWorkflows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTestWorkflows indicates an expected call of ReconcileTestWorkflows.
func (mr *MockInterfaceMockRecorder) ReconcileTestWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTestWorkflows", reflect.TypeOf((*MockInterface)(nil).ReconcileTestWorkflows), arg0)
}

// ReconcileTests mocks base method.
func (m *MockInterface) ReconcileTests(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileTests", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileTests indicates an expected call of ReconcileTests.
func (mr *MockInterfaceMockRecorder) ReconcileTests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileTests", reflect.TypeOf((*MockInterface)(nil).ReconcileTests), arg0)
}
