// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/filesystem (interfaces: FileSystem)
//
// Generated by this command:
//
//	mockgen -destination=./mock_filesystem.go -package=filesystem github.com/kubeshop/testkube/pkg/filesystem FileSystem
//

// Package filesystem is a generated GoMock package.
package filesystem

import (
	bufio "bufio"
	fs "io/fs"
	os "os"
	filepath "path/filepath"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileSystem is a mock of FileSystem interface.
type MockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemMockRecorder
	isgomock struct{}
}

// MockFileSystemMockRecorder is the mock recorder for MockFileSystem.
type MockFileSystemMockRecorder struct {
	mock *MockFileSystem
}

// NewMockFileSystem creates a new mock instance.
func NewMockFileSystem(ctrl *gomock.Controller) *MockFileSystem {
	mock := &MockFileSystem{ctrl: ctrl}
	mock.recorder = &MockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystem) EXPECT() *MockFileSystemMockRecorder {
	return m.recorder
}

// Getwd mocks base method.
func (m *MockFileSystem) Getwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd.
func (mr *MockFileSystemMockRecorder) Getwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockFileSystem)(nil).Getwd))
}

// OpenFile mocks base method.
func (m *MockFileSystem) OpenFile(name string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileSystemMockRecorder) OpenFile(name, flag, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileSystem)(nil).OpenFile), name, flag, perm)
}

// OpenFileBuffered mocks base method.
func (m *MockFileSystem) OpenFileBuffered(name string) (*bufio.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFileBuffered", name)
	ret0, _ := ret[0].(*bufio.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFileBuffered indicates an expected call of OpenFileBuffered.
func (mr *MockFileSystemMockRecorder) OpenFileBuffered(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFileBuffered", reflect.TypeOf((*MockFileSystem)(nil).OpenFileBuffered), name)
}

// OpenFileRO mocks base method.
func (m *MockFileSystem) OpenFileRO(name string) (fs.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFileRO", name)
	ret0, _ := ret[0].(fs.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFileRO indicates an expected call of OpenFileRO.
func (mr *MockFileSystemMockRecorder) OpenFileRO(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFileRO", reflect.TypeOf((*MockFileSystem)(nil).OpenFileRO), name)
}

// ReadDir mocks base method.
func (m *MockFileSystem) ReadDir(dirname string) ([]os.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dirname)
	ret0, _ := ret[0].([]os.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockFileSystemMockRecorder) ReadDir(dirname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockFileSystem)(nil).ReadDir), dirname)
}

// ReadFile mocks base method.
func (m *MockFileSystem) ReadFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileSystemMockRecorder) ReadFile(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileSystem)(nil).ReadFile), filename)
}

// ReadFileBuffered mocks base method.
func (m *MockFileSystem) ReadFileBuffered(filename string) (*bufio.Reader, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileBuffered", filename)
	ret0, _ := ret[0].(*bufio.Reader)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFileBuffered indicates an expected call of ReadFileBuffered.
func (mr *MockFileSystemMockRecorder) ReadFileBuffered(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileBuffered", reflect.TypeOf((*MockFileSystem)(nil).ReadFileBuffered), filename)
}

// Stat mocks base method.
func (m *MockFileSystem) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileSystemMockRecorder) Stat(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFileSystem)(nil).Stat), name)
}

// Walk mocks base method.
func (m *MockFileSystem) Walk(root string, walkFn filepath.WalkFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", root, walkFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockFileSystemMockRecorder) Walk(root, walkFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockFileSystem)(nil).Walk), root, walkFn)
}
