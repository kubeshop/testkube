// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/repository/testresult (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_repository.go -package=testresult github.com/kubeshop/testkube/pkg/repository/testresult Repository
//

// Package testresult is a generated GoMock package.
package testresult

import (
	context "context"
	reflect "reflect"
	time "time"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context, filter Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx, filter)
}

// DeleteAll mocks base method.
func (m *MockRepository) DeleteAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRepositoryMockRecorder) DeleteAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRepository)(nil).DeleteAll), ctx)
}

// DeleteByTestSuite mocks base method.
func (m *MockRepository) DeleteByTestSuite(ctx context.Context, testSuiteName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTestSuite", ctx, testSuiteName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTestSuite indicates an expected call of DeleteByTestSuite.
func (mr *MockRepositoryMockRecorder) DeleteByTestSuite(ctx, testSuiteName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTestSuite", reflect.TypeOf((*MockRepository)(nil).DeleteByTestSuite), ctx, testSuiteName)
}

// DeleteByTestSuites mocks base method.
func (m *MockRepository) DeleteByTestSuites(ctx context.Context, testSuiteNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTestSuites", ctx, testSuiteNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTestSuites indicates an expected call of DeleteByTestSuites.
func (mr *MockRepositoryMockRecorder) DeleteByTestSuites(ctx, testSuiteNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTestSuites", reflect.TypeOf((*MockRepository)(nil).DeleteByTestSuites), ctx, testSuiteNames)
}

// EndExecution mocks base method.
func (m *MockRepository) EndExecution(ctx context.Context, execution testkube.TestSuiteExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndExecution", ctx, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndExecution indicates an expected call of EndExecution.
func (mr *MockRepositoryMockRecorder) EndExecution(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndExecution", reflect.TypeOf((*MockRepository)(nil).EndExecution), ctx, execution)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (testkube.TestSuiteExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(testkube.TestSuiteExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetByNameAndTestSuite mocks base method.
func (m *MockRepository) GetByNameAndTestSuite(ctx context.Context, name, testSuiteName string) (testkube.TestSuiteExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameAndTestSuite", ctx, name, testSuiteName)
	ret0, _ := ret[0].(testkube.TestSuiteExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameAndTestSuite indicates an expected call of GetByNameAndTestSuite.
func (mr *MockRepositoryMockRecorder) GetByNameAndTestSuite(ctx, name, testSuiteName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameAndTestSuite", reflect.TypeOf((*MockRepository)(nil).GetByNameAndTestSuite), ctx, name, testSuiteName)
}

// GetExecutions mocks base method.
func (m *MockRepository) GetExecutions(ctx context.Context, filter Filter) ([]testkube.TestSuiteExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutions", ctx, filter)
	ret0, _ := ret[0].([]testkube.TestSuiteExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutions indicates an expected call of GetExecutions.
func (mr *MockRepositoryMockRecorder) GetExecutions(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutions", reflect.TypeOf((*MockRepository)(nil).GetExecutions), ctx, filter)
}

// GetExecutionsTotals mocks base method.
func (m *MockRepository) GetExecutionsTotals(ctx context.Context, filter ...Filter) (testkube.ExecutionsTotals, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionsTotals", varargs...)
	ret0, _ := ret[0].(testkube.ExecutionsTotals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsTotals indicates an expected call of GetExecutionsTotals.
func (mr *MockRepositoryMockRecorder) GetExecutionsTotals(ctx any, filter ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, filter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsTotals", reflect.TypeOf((*MockRepository)(nil).GetExecutionsTotals), varargs...)
}

// GetLatestByTestSuite mocks base method.
func (m *MockRepository) GetLatestByTestSuite(ctx context.Context, testSuiteName string) (*testkube.TestSuiteExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByTestSuite", ctx, testSuiteName)
	ret0, _ := ret[0].(*testkube.TestSuiteExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByTestSuite indicates an expected call of GetLatestByTestSuite.
func (mr *MockRepositoryMockRecorder) GetLatestByTestSuite(ctx, testSuiteName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByTestSuite", reflect.TypeOf((*MockRepository)(nil).GetLatestByTestSuite), ctx, testSuiteName)
}

// GetLatestByTestSuites mocks base method.
func (m *MockRepository) GetLatestByTestSuites(ctx context.Context, testSuiteNames []string) ([]testkube.TestSuiteExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByTestSuites", ctx, testSuiteNames)
	ret0, _ := ret[0].([]testkube.TestSuiteExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByTestSuites indicates an expected call of GetLatestByTestSuites.
func (mr *MockRepositoryMockRecorder) GetLatestByTestSuites(ctx, testSuiteNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByTestSuites", reflect.TypeOf((*MockRepository)(nil).GetLatestByTestSuites), ctx, testSuiteNames)
}

// GetNextExecutionNumber mocks base method.
func (m *MockRepository) GetNextExecutionNumber(ctx context.Context, name string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextExecutionNumber", ctx, name)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextExecutionNumber indicates an expected call of GetNextExecutionNumber.
func (mr *MockRepositoryMockRecorder) GetNextExecutionNumber(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextExecutionNumber", reflect.TypeOf((*MockRepository)(nil).GetNextExecutionNumber), ctx, name)
}

// GetPreviousFinishedState mocks base method.
func (m *MockRepository) GetPreviousFinishedState(ctx context.Context, testName string, date time.Time) (testkube.TestSuiteExecutionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviousFinishedState", ctx, testName, date)
	ret0, _ := ret[0].(testkube.TestSuiteExecutionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviousFinishedState indicates an expected call of GetPreviousFinishedState.
func (mr *MockRepositoryMockRecorder) GetPreviousFinishedState(ctx, testName, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviousFinishedState", reflect.TypeOf((*MockRepository)(nil).GetPreviousFinishedState), ctx, testName, date)
}

// GetTestSuiteMetrics mocks base method.
func (m *MockRepository) GetTestSuiteMetrics(ctx context.Context, name string, limit, last int) (testkube.ExecutionsMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestSuiteMetrics", ctx, name, limit, last)
	ret0, _ := ret[0].(testkube.ExecutionsMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestSuiteMetrics indicates an expected call of GetTestSuiteMetrics.
func (mr *MockRepositoryMockRecorder) GetTestSuiteMetrics(ctx, name, limit, last any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestSuiteMetrics", reflect.TypeOf((*MockRepository)(nil).GetTestSuiteMetrics), ctx, name, limit, last)
}

// Insert mocks base method.
func (m *MockRepository) Insert(ctx context.Context, result testkube.TestSuiteExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), ctx, result)
}

// StartExecution mocks base method.
func (m *MockRepository) StartExecution(ctx context.Context, id string, startTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExecution", ctx, id, startTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartExecution indicates an expected call of StartExecution.
func (mr *MockRepositoryMockRecorder) StartExecution(ctx, id, startTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecution", reflect.TypeOf((*MockRepository)(nil).StartExecution), ctx, id, startTime)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, result testkube.TestSuiteExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, result)
}
