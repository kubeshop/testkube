// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/repository/sequence (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_repository.go -package=sequence github.com/kubeshop/testkube/pkg/repository/sequence Repository
//

// Package sequence is a generated GoMock package.
package sequence

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteAllExecutionNumbers mocks base method.
func (m *MockRepository) DeleteAllExecutionNumbers(ctx context.Context, executionType ExecutionType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllExecutionNumbers", ctx, executionType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllExecutionNumbers indicates an expected call of DeleteAllExecutionNumbers.
func (mr *MockRepositoryMockRecorder) DeleteAllExecutionNumbers(ctx, executionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllExecutionNumbers", reflect.TypeOf((*MockRepository)(nil).DeleteAllExecutionNumbers), ctx, executionType)
}

// DeleteExecutionNumber mocks base method.
func (m *MockRepository) DeleteExecutionNumber(ctx context.Context, name string, executionType ExecutionType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExecutionNumber", ctx, name, executionType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExecutionNumber indicates an expected call of DeleteExecutionNumber.
func (mr *MockRepositoryMockRecorder) DeleteExecutionNumber(ctx, name, executionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecutionNumber", reflect.TypeOf((*MockRepository)(nil).DeleteExecutionNumber), ctx, name, executionType)
}

// DeleteExecutionNumbers mocks base method.
func (m *MockRepository) DeleteExecutionNumbers(ctx context.Context, names []string, executionType ExecutionType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExecutionNumbers", ctx, names, executionType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExecutionNumbers indicates an expected call of DeleteExecutionNumbers.
func (mr *MockRepositoryMockRecorder) DeleteExecutionNumbers(ctx, names, executionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecutionNumbers", reflect.TypeOf((*MockRepository)(nil).DeleteExecutionNumbers), ctx, names, executionType)
}

// GetNextExecutionNumber mocks base method.
func (m *MockRepository) GetNextExecutionNumber(ctx context.Context, name string, executionType ExecutionType) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextExecutionNumber", ctx, name, executionType)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextExecutionNumber indicates an expected call of GetNextExecutionNumber.
func (mr *MockRepositoryMockRecorder) GetNextExecutionNumber(ctx, name, executionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextExecutionNumber", reflect.TypeOf((*MockRepository)(nil).GetNextExecutionNumber), ctx, name, executionType)
}
