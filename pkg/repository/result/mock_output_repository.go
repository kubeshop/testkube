// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/repository/result (interfaces: OutputRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_output_repository.go -package=result github.com/kubeshop/testkube/pkg/repository/result OutputRepository
//

// Package result is a generated GoMock package.
package result

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOutputRepository is a mock of OutputRepository interface.
type MockOutputRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutputRepositoryMockRecorder
	isgomock struct{}
}

// MockOutputRepositoryMockRecorder is the mock recorder for MockOutputRepository.
type MockOutputRepositoryMockRecorder struct {
	mock *MockOutputRepository
}

// NewMockOutputRepository creates a new mock instance.
func NewMockOutputRepository(ctrl *gomock.Controller) *MockOutputRepository {
	mock := &MockOutputRepository{ctrl: ctrl}
	mock.recorder = &MockOutputRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputRepository) EXPECT() *MockOutputRepositoryMockRecorder {
	return m.recorder
}

// DeleteAllOutput mocks base method.
func (m *MockOutputRepository) DeleteAllOutput(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllOutput", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOutput indicates an expected call of DeleteAllOutput.
func (mr *MockOutputRepositoryMockRecorder) DeleteAllOutput(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOutput", reflect.TypeOf((*MockOutputRepository)(nil).DeleteAllOutput), ctx)
}

// DeleteOutput mocks base method.
func (m *MockOutputRepository) DeleteOutput(ctx context.Context, id, testName, testSuiteName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutput", ctx, id, testName, testSuiteName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutput indicates an expected call of DeleteOutput.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutput(ctx, id, testName, testSuiteName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutput", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutput), ctx, id, testName, testSuiteName)
}

// DeleteOutputByTest mocks base method.
func (m *MockOutputRepository) DeleteOutputByTest(ctx context.Context, testName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputByTest", ctx, testName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputByTest indicates an expected call of DeleteOutputByTest.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputByTest(ctx, testName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputByTest", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputByTest), ctx, testName)
}

// DeleteOutputByTestSuite mocks base method.
func (m *MockOutputRepository) DeleteOutputByTestSuite(ctx context.Context, testSuiteName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputByTestSuite", ctx, testSuiteName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputByTestSuite indicates an expected call of DeleteOutputByTestSuite.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputByTestSuite(ctx, testSuiteName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputByTestSuite", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputByTestSuite), ctx, testSuiteName)
}

// DeleteOutputForAllTestSuite mocks base method.
func (m *MockOutputRepository) DeleteOutputForAllTestSuite(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputForAllTestSuite", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputForAllTestSuite indicates an expected call of DeleteOutputForAllTestSuite.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputForAllTestSuite(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputForAllTestSuite", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputForAllTestSuite), ctx)
}

// DeleteOutputForTestSuites mocks base method.
func (m *MockOutputRepository) DeleteOutputForTestSuites(ctx context.Context, testSuiteNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputForTestSuites", ctx, testSuiteNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputForTestSuites indicates an expected call of DeleteOutputForTestSuites.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputForTestSuites(ctx, testSuiteNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputForTestSuites", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputForTestSuites), ctx, testSuiteNames)
}

// DeleteOutputForTests mocks base method.
func (m *MockOutputRepository) DeleteOutputForTests(ctx context.Context, testNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputForTests", ctx, testNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputForTests indicates an expected call of DeleteOutputForTests.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputForTests(ctx, testNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputForTests", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputForTests), ctx, testNames)
}

// GetOutput mocks base method.
func (m *MockOutputRepository) GetOutput(ctx context.Context, id, testName, testSuiteName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput", ctx, id, testName, testSuiteName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockOutputRepositoryMockRecorder) GetOutput(ctx, id, testName, testSuiteName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockOutputRepository)(nil).GetOutput), ctx, id, testName, testSuiteName)
}

// GetOutputSize mocks base method.
func (m *MockOutputRepository) GetOutputSize(ctx context.Context, executionID, testName, testSuiteName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputSize", ctx, executionID, testName, testSuiteName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputSize indicates an expected call of GetOutputSize.
func (mr *MockOutputRepositoryMockRecorder) GetOutputSize(ctx, executionID, testName, testSuiteName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputSize", reflect.TypeOf((*MockOutputRepository)(nil).GetOutputSize), ctx, executionID, testName, testSuiteName)
}

// InsertOutput mocks base method.
func (m *MockOutputRepository) InsertOutput(ctx context.Context, id, testName, testSuiteName, output string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOutput", ctx, id, testName, testSuiteName, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOutput indicates an expected call of InsertOutput.
func (mr *MockOutputRepositoryMockRecorder) InsertOutput(ctx, id, testName, testSuiteName, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOutput", reflect.TypeOf((*MockOutputRepository)(nil).InsertOutput), ctx, id, testName, testSuiteName, output)
}

// StreamOutput mocks base method.
func (m *MockOutputRepository) StreamOutput(ctx context.Context, executionID, testName, testSuiteName string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamOutput", ctx, executionID, testName, testSuiteName)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamOutput indicates an expected call of StreamOutput.
func (mr *MockOutputRepositoryMockRecorder) StreamOutput(ctx, executionID, testName, testSuiteName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamOutput", reflect.TypeOf((*MockOutputRepository)(nil).StreamOutput), ctx, executionID, testName, testSuiteName)
}

// UpdateOutput mocks base method.
func (m *MockOutputRepository) UpdateOutput(ctx context.Context, id, testName, testSuiteName, output string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutput", ctx, id, testName, testSuiteName, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOutput indicates an expected call of UpdateOutput.
func (mr *MockOutputRepositoryMockRecorder) UpdateOutput(ctx, id, testName, testSuiteName, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutput", reflect.TypeOf((*MockOutputRepository)(nil).UpdateOutput), ctx, id, testName, testSuiteName, output)
}
