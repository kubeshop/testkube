// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/repository/testworkflow (interfaces: OutputRepository)

// Package testworkflow is a generated GoMock package.
package testworkflow

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOutputRepository is a mock of OutputRepository interface.
type MockOutputRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutputRepositoryMockRecorder
}

// MockOutputRepositoryMockRecorder is the mock recorder for MockOutputRepository.
type MockOutputRepositoryMockRecorder struct {
	mock *MockOutputRepository
}

// NewMockOutputRepository creates a new mock instance.
func NewMockOutputRepository(ctrl *gomock.Controller) *MockOutputRepository {
	mock := &MockOutputRepository{ctrl: ctrl}
	mock.recorder = &MockOutputRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputRepository) EXPECT() *MockOutputRepositoryMockRecorder {
	return m.recorder
}

// DeleteOutputByTestWorkflow mocks base method.
func (m *MockOutputRepository) DeleteOutputByTestWorkflow(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputByTestWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputByTestWorkflow indicates an expected call of DeleteOutputByTestWorkflow.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputByTestWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputByTestWorkflow", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputByTestWorkflow), arg0, arg1)
}

// DeleteOutputForTestWorkflows mocks base method.
func (m *MockOutputRepository) DeleteOutputForTestWorkflows(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOutputForTestWorkflows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOutputForTestWorkflows indicates an expected call of DeleteOutputForTestWorkflows.
func (mr *MockOutputRepositoryMockRecorder) DeleteOutputForTestWorkflows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOutputForTestWorkflows", reflect.TypeOf((*MockOutputRepository)(nil).DeleteOutputForTestWorkflows), arg0, arg1)
}

// HasLog mocks base method.
func (m *MockOutputRepository) HasLog(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasLog indicates an expected call of HasLog.
func (mr *MockOutputRepositoryMockRecorder) HasLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLog", reflect.TypeOf((*MockOutputRepository)(nil).HasLog), arg0, arg1, arg2)
}

// PresignReadLog mocks base method.
func (m *MockOutputRepository) PresignReadLog(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignReadLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignReadLog indicates an expected call of PresignReadLog.
func (mr *MockOutputRepositoryMockRecorder) PresignReadLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignReadLog", reflect.TypeOf((*MockOutputRepository)(nil).PresignReadLog), arg0, arg1, arg2)
}

// PresignSaveLog mocks base method.
func (m *MockOutputRepository) PresignSaveLog(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignSaveLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignSaveLog indicates an expected call of PresignSaveLog.
func (mr *MockOutputRepositoryMockRecorder) PresignSaveLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignSaveLog", reflect.TypeOf((*MockOutputRepository)(nil).PresignSaveLog), arg0, arg1, arg2)
}

// ReadLog mocks base method.
func (m *MockOutputRepository) ReadLog(arg0 context.Context, arg1, arg2 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLog indicates an expected call of ReadLog.
func (mr *MockOutputRepositoryMockRecorder) ReadLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLog", reflect.TypeOf((*MockOutputRepository)(nil).ReadLog), arg0, arg1, arg2)
}

// SaveLog mocks base method.
func (m *MockOutputRepository) SaveLog(arg0 context.Context, arg1, arg2 string, arg3 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLog", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLog indicates an expected call of SaveLog.
func (mr *MockOutputRepositoryMockRecorder) SaveLog(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLog", reflect.TypeOf((*MockOutputRepository)(nil).SaveLog), arg0, arg1, arg2, arg3)
}
