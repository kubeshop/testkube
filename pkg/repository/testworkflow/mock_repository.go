// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/repository/testworkflow (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_repository.go -package=testworkflow github.com/kubeshop/testkube/pkg/repository/testworkflow Repository
//

// Package testworkflow is a generated GoMock package.
package testworkflow

import (
	context "context"
	reflect "reflect"
	time "time"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AbortIfQueued mocks base method.
func (m *MockRepository) AbortIfQueued(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortIfQueued", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortIfQueued indicates an expected call of AbortIfQueued.
func (mr *MockRepositoryMockRecorder) AbortIfQueued(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortIfQueued", reflect.TypeOf((*MockRepository)(nil).AbortIfQueued), ctx, id)
}

// Assign mocks base method.
func (m *MockRepository) Assign(ctx context.Context, id, prevRunnerId, newRunnerId string, assignedAt *time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", ctx, id, prevRunnerId, newRunnerId, assignedAt)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Assign indicates an expected call of Assign.
func (mr *MockRepositoryMockRecorder) Assign(ctx, id, prevRunnerId, newRunnerId, assignedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockRepository)(nil).Assign), ctx, id, prevRunnerId, newRunnerId, assignedAt)
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context, filter Filter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx, filter)
}

// DeleteAll mocks base method.
func (m *MockRepository) DeleteAll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockRepositoryMockRecorder) DeleteAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockRepository)(nil).DeleteAll), ctx)
}

// DeleteByTestWorkflow mocks base method.
func (m *MockRepository) DeleteByTestWorkflow(ctx context.Context, workflowName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTestWorkflow", ctx, workflowName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTestWorkflow indicates an expected call of DeleteByTestWorkflow.
func (mr *MockRepositoryMockRecorder) DeleteByTestWorkflow(ctx, workflowName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTestWorkflow", reflect.TypeOf((*MockRepository)(nil).DeleteByTestWorkflow), ctx, workflowName)
}

// DeleteByTestWorkflows mocks base method.
func (m *MockRepository) DeleteByTestWorkflows(ctx context.Context, workflowNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTestWorkflows", ctx, workflowNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTestWorkflows indicates an expected call of DeleteByTestWorkflows.
func (mr *MockRepositoryMockRecorder) DeleteByTestWorkflows(ctx, workflowNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTestWorkflows", reflect.TypeOf((*MockRepository)(nil).DeleteByTestWorkflows), ctx, workflowNames)
}

// FinishResultStrict mocks base method.
func (m *MockRepository) FinishResultStrict(ctx context.Context, id, runnerId string, result *testkube.TestWorkflowResult) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishResultStrict", ctx, id, runnerId, result)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishResultStrict indicates an expected call of FinishResultStrict.
func (mr *MockRepositoryMockRecorder) FinishResultStrict(ctx, id, runnerId, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishResultStrict", reflect.TypeOf((*MockRepository)(nil).FinishResultStrict), ctx, id, runnerId, result)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetByNameAndTestWorkflow mocks base method.
func (m *MockRepository) GetByNameAndTestWorkflow(ctx context.Context, name, workflowName string) (testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNameAndTestWorkflow", ctx, name, workflowName)
	ret0, _ := ret[0].(testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNameAndTestWorkflow indicates an expected call of GetByNameAndTestWorkflow.
func (mr *MockRepositoryMockRecorder) GetByNameAndTestWorkflow(ctx, name, workflowName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNameAndTestWorkflow", reflect.TypeOf((*MockRepository)(nil).GetByNameAndTestWorkflow), ctx, name, workflowName)
}

// GetExecutionTags mocks base method.
func (m *MockRepository) GetExecutionTags(ctx context.Context, testWorkflowName string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionTags", ctx, testWorkflowName)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionTags indicates an expected call of GetExecutionTags.
func (mr *MockRepositoryMockRecorder) GetExecutionTags(ctx, testWorkflowName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionTags", reflect.TypeOf((*MockRepository)(nil).GetExecutionTags), ctx, testWorkflowName)
}

// GetExecutions mocks base method.
func (m *MockRepository) GetExecutions(ctx context.Context, filter Filter) ([]testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutions", ctx, filter)
	ret0, _ := ret[0].([]testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutions indicates an expected call of GetExecutions.
func (mr *MockRepositoryMockRecorder) GetExecutions(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutions", reflect.TypeOf((*MockRepository)(nil).GetExecutions), ctx, filter)
}

// GetExecutionsSummary mocks base method.
func (m *MockRepository) GetExecutionsSummary(ctx context.Context, filter Filter) ([]testkube.TestWorkflowExecutionSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionsSummary", ctx, filter)
	ret0, _ := ret[0].([]testkube.TestWorkflowExecutionSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsSummary indicates an expected call of GetExecutionsSummary.
func (mr *MockRepositoryMockRecorder) GetExecutionsSummary(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsSummary", reflect.TypeOf((*MockRepository)(nil).GetExecutionsSummary), ctx, filter)
}

// GetExecutionsTotals mocks base method.
func (m *MockRepository) GetExecutionsTotals(ctx context.Context, filter ...Filter) (testkube.ExecutionsTotals, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range filter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionsTotals", varargs...)
	ret0, _ := ret[0].(testkube.ExecutionsTotals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionsTotals indicates an expected call of GetExecutionsTotals.
func (mr *MockRepositoryMockRecorder) GetExecutionsTotals(ctx any, filter ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, filter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionsTotals", reflect.TypeOf((*MockRepository)(nil).GetExecutionsTotals), varargs...)
}

// GetFinished mocks base method.
func (m *MockRepository) GetFinished(ctx context.Context, filter Filter) ([]testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinished", ctx, filter)
	ret0, _ := ret[0].([]testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinished indicates an expected call of GetFinished.
func (mr *MockRepositoryMockRecorder) GetFinished(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinished", reflect.TypeOf((*MockRepository)(nil).GetFinished), ctx, filter)
}

// GetLatestByTestWorkflow mocks base method.
func (m *MockRepository) GetLatestByTestWorkflow(ctx context.Context, workflowName string, sortBy LatestSortBy) (*testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByTestWorkflow", ctx, workflowName, sortBy)
	ret0, _ := ret[0].(*testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByTestWorkflow indicates an expected call of GetLatestByTestWorkflow.
func (mr *MockRepositoryMockRecorder) GetLatestByTestWorkflow(ctx, workflowName, sortBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByTestWorkflow", reflect.TypeOf((*MockRepository)(nil).GetLatestByTestWorkflow), ctx, workflowName, sortBy)
}

// GetLatestByTestWorkflows mocks base method.
func (m *MockRepository) GetLatestByTestWorkflows(ctx context.Context, workflowNames []string) ([]testkube.TestWorkflowExecutionSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByTestWorkflows", ctx, workflowNames)
	ret0, _ := ret[0].([]testkube.TestWorkflowExecutionSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByTestWorkflows indicates an expected call of GetLatestByTestWorkflows.
func (mr *MockRepositoryMockRecorder) GetLatestByTestWorkflows(ctx, workflowNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByTestWorkflows", reflect.TypeOf((*MockRepository)(nil).GetLatestByTestWorkflows), ctx, workflowNames)
}

// GetNextExecutionNumber mocks base method.
func (m *MockRepository) GetNextExecutionNumber(ctx context.Context, name string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextExecutionNumber", ctx, name)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextExecutionNumber indicates an expected call of GetNextExecutionNumber.
func (mr *MockRepositoryMockRecorder) GetNextExecutionNumber(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextExecutionNumber", reflect.TypeOf((*MockRepository)(nil).GetNextExecutionNumber), ctx, name)
}

// GetPreviousFinishedState mocks base method.
func (m *MockRepository) GetPreviousFinishedState(ctx context.Context, testName string, date time.Time) (testkube.TestWorkflowStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreviousFinishedState", ctx, testName, date)
	ret0, _ := ret[0].(testkube.TestWorkflowStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreviousFinishedState indicates an expected call of GetPreviousFinishedState.
func (mr *MockRepositoryMockRecorder) GetPreviousFinishedState(ctx, testName, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreviousFinishedState", reflect.TypeOf((*MockRepository)(nil).GetPreviousFinishedState), ctx, testName, date)
}

// GetRunning mocks base method.
func (m *MockRepository) GetRunning(ctx context.Context) ([]testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunning", ctx)
	ret0, _ := ret[0].([]testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunning indicates an expected call of GetRunning.
func (mr *MockRepositoryMockRecorder) GetRunning(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunning", reflect.TypeOf((*MockRepository)(nil).GetRunning), ctx)
}

// GetTestWorkflowMetrics mocks base method.
func (m *MockRepository) GetTestWorkflowMetrics(ctx context.Context, name string, limit, last int) (testkube.ExecutionsMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestWorkflowMetrics", ctx, name, limit, last)
	ret0, _ := ret[0].(testkube.ExecutionsMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestWorkflowMetrics indicates an expected call of GetTestWorkflowMetrics.
func (mr *MockRepositoryMockRecorder) GetTestWorkflowMetrics(ctx, name, limit, last any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestWorkflowMetrics", reflect.TypeOf((*MockRepository)(nil).GetTestWorkflowMetrics), ctx, name, limit, last)
}

// GetUnassigned mocks base method.
func (m *MockRepository) GetUnassigned(ctx context.Context) ([]testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnassigned", ctx)
	ret0, _ := ret[0].([]testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnassigned indicates an expected call of GetUnassigned.
func (mr *MockRepositoryMockRecorder) GetUnassigned(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnassigned", reflect.TypeOf((*MockRepository)(nil).GetUnassigned), ctx)
}

// GetWithRunner mocks base method.
func (m *MockRepository) GetWithRunner(ctx context.Context, id, runner string) (testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithRunner", ctx, id, runner)
	ret0, _ := ret[0].(testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithRunner indicates an expected call of GetWithRunner.
func (mr *MockRepositoryMockRecorder) GetWithRunner(ctx, id, runner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithRunner", reflect.TypeOf((*MockRepository)(nil).GetWithRunner), ctx, id, runner)
}

// Init mocks base method.
func (m *MockRepository) Init(ctx context.Context, id string, data InitData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockRepositoryMockRecorder) Init(ctx, id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRepository)(nil).Init), ctx, id, data)
}

// Insert mocks base method.
func (m *MockRepository) Insert(ctx context.Context, result testkube.TestWorkflowExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), ctx, result)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, result testkube.TestWorkflowExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, result)
}

// UpdateOutput mocks base method.
func (m *MockRepository) UpdateOutput(ctx context.Context, id string, output []testkube.TestWorkflowOutput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutput", ctx, id, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOutput indicates an expected call of UpdateOutput.
func (mr *MockRepositoryMockRecorder) UpdateOutput(ctx, id, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutput", reflect.TypeOf((*MockRepository)(nil).UpdateOutput), ctx, id, output)
}

// UpdateReport mocks base method.
func (m *MockRepository) UpdateReport(ctx context.Context, id string, report *testkube.TestWorkflowReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReport", ctx, id, report)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReport indicates an expected call of UpdateReport.
func (mr *MockRepositoryMockRecorder) UpdateReport(ctx, id, report any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReport", reflect.TypeOf((*MockRepository)(nil).UpdateReport), ctx, id, report)
}

// UpdateResourceAggregations mocks base method.
func (m *MockRepository) UpdateResourceAggregations(ctx context.Context, id string, resourceAggregations *testkube.TestWorkflowExecutionResourceAggregationsReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceAggregations", ctx, id, resourceAggregations)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceAggregations indicates an expected call of UpdateResourceAggregations.
func (mr *MockRepositoryMockRecorder) UpdateResourceAggregations(ctx, id, resourceAggregations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceAggregations", reflect.TypeOf((*MockRepository)(nil).UpdateResourceAggregations), ctx, id, resourceAggregations)
}

// UpdateResult mocks base method.
func (m *MockRepository) UpdateResult(ctx context.Context, id string, result *testkube.TestWorkflowResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResult", ctx, id, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResult indicates an expected call of UpdateResult.
func (mr *MockRepositoryMockRecorder) UpdateResult(ctx, id, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResult", reflect.TypeOf((*MockRepository)(nil).UpdateResult), ctx, id, result)
}

// UpdateResultStrict mocks base method.
func (m *MockRepository) UpdateResultStrict(ctx context.Context, id, runnerId string, result *testkube.TestWorkflowResult) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResultStrict", ctx, id, runnerId, result)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResultStrict indicates an expected call of UpdateResultStrict.
func (mr *MockRepositoryMockRecorder) UpdateResultStrict(ctx, id, runnerId, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResultStrict", reflect.TypeOf((*MockRepository)(nil).UpdateResultStrict), ctx, id, runnerId, result)
}
