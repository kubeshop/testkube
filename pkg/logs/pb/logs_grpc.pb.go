// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pkg/logs/pb/logs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogsService_Logs_FullMethodName = "/logs.LogsService/Logs"
)

// LogsServiceClient is the client API for LogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsServiceClient interface {
	Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (LogsService_LogsClient, error)
}

type logsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsServiceClient(cc grpc.ClientConnInterface) LogsServiceClient {
	return &logsServiceClient{cc}
}

func (c *logsServiceClient) Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (LogsService_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogsService_ServiceDesc.Streams[0], LogsService_Logs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logsServiceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogsService_LogsClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type logsServiceLogsClient struct {
	grpc.ClientStream
}

func (x *logsServiceLogsClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogsServiceServer is the server API for LogsService service.
// All implementations must embed UnimplementedLogsServiceServer
// for forward compatibility
type LogsServiceServer interface {
	Logs(*LogRequest, LogsService_LogsServer) error
	mustEmbedUnimplementedLogsServiceServer()
}

// UnimplementedLogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogsServiceServer struct {
}

func (UnimplementedLogsServiceServer) Logs(*LogRequest, LogsService_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedLogsServiceServer) mustEmbedUnimplementedLogsServiceServer() {}

// UnsafeLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServiceServer will
// result in compilation errors.
type UnsafeLogsServiceServer interface {
	mustEmbedUnimplementedLogsServiceServer()
}

func RegisterLogsServiceServer(s grpc.ServiceRegistrar, srv LogsServiceServer) {
	s.RegisterService(&LogsService_ServiceDesc, srv)
}

func _LogsService_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogsServiceServer).Logs(m, &logsServiceLogsServer{stream})
}

type LogsService_LogsServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type logsServiceLogsServer struct {
	grpc.ServerStream
}

func (x *logsServiceLogsServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

// LogsService_ServiceDesc is the grpc.ServiceDesc for LogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.LogsService",
	HandlerType: (*LogsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _LogsService_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/logs/pb/logs.proto",
}

const (
	CloudLogsService_Stream_FullMethodName = "/logs.CloudLogsService/Stream"
	CloudLogsService_Logs_FullMethodName   = "/logs.CloudLogsService/Logs"
)

// CloudLogsServiceClient is the client API for CloudLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudLogsServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (CloudLogsService_StreamClient, error)
	Logs(ctx context.Context, in *CloudLogRequest, opts ...grpc.CallOption) (CloudLogsService_LogsClient, error)
}

type cloudLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudLogsServiceClient(cc grpc.ClientConnInterface) CloudLogsServiceClient {
	return &cloudLogsServiceClient{cc}
}

func (c *cloudLogsServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (CloudLogsService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudLogsService_ServiceDesc.Streams[0], CloudLogsService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudLogsServiceStreamClient{stream}
	return x, nil
}

type CloudLogsService_StreamClient interface {
	Send(*Log) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type cloudLogsServiceStreamClient struct {
	grpc.ClientStream
}

func (x *cloudLogsServiceStreamClient) Send(m *Log) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudLogsServiceStreamClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudLogsServiceClient) Logs(ctx context.Context, in *CloudLogRequest, opts ...grpc.CallOption) (CloudLogsService_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudLogsService_ServiceDesc.Streams[1], CloudLogsService_Logs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudLogsServiceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudLogsService_LogsClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type cloudLogsServiceLogsClient struct {
	grpc.ClientStream
}

func (x *cloudLogsServiceLogsClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudLogsServiceServer is the server API for CloudLogsService service.
// All implementations must embed UnimplementedCloudLogsServiceServer
// for forward compatibility
type CloudLogsServiceServer interface {
	Stream(CloudLogsService_StreamServer) error
	Logs(*CloudLogRequest, CloudLogsService_LogsServer) error
	mustEmbedUnimplementedCloudLogsServiceServer()
}

// UnimplementedCloudLogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudLogsServiceServer struct {
}

func (UnimplementedCloudLogsServiceServer) Stream(CloudLogsService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedCloudLogsServiceServer) Logs(*CloudLogRequest, CloudLogsService_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedCloudLogsServiceServer) mustEmbedUnimplementedCloudLogsServiceServer() {}

// UnsafeCloudLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudLogsServiceServer will
// result in compilation errors.
type UnsafeCloudLogsServiceServer interface {
	mustEmbedUnimplementedCloudLogsServiceServer()
}

func RegisterCloudLogsServiceServer(s grpc.ServiceRegistrar, srv CloudLogsServiceServer) {
	s.RegisterService(&CloudLogsService_ServiceDesc, srv)
}

func _CloudLogsService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudLogsServiceServer).Stream(&cloudLogsServiceStreamServer{stream})
}

type CloudLogsService_StreamServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*Log, error)
	grpc.ServerStream
}

type cloudLogsServiceStreamServer struct {
	grpc.ServerStream
}

func (x *cloudLogsServiceStreamServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudLogsServiceStreamServer) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CloudLogsService_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CloudLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudLogsServiceServer).Logs(m, &cloudLogsServiceLogsServer{stream})
}

type CloudLogsService_LogsServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type cloudLogsServiceLogsServer struct {
	grpc.ServerStream
}

func (x *cloudLogsServiceLogsServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

// CloudLogsService_ServiceDesc is the grpc.ServiceDesc for CloudLogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudLogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.CloudLogsService",
	HandlerType: (*CloudLogsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _CloudLogsService_Stream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _CloudLogsService_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/logs/pb/logs.proto",
}
