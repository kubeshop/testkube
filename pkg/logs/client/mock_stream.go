// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/logs/client (interfaces: Stream)
//
// Generated by this command:
//
//	mockgen -destination=./mock_stream.go -package=client github.com/kubeshop/testkube/pkg/logs/client Stream
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	events "github.com/kubeshop/testkube/pkg/logs/events"
	gomock "go.uber.org/mock/gomock"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
	isgomock struct{}
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockStream) Finish(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockStreamMockRecorder) Finish(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockStream)(nil).Finish), ctx, id)
}

// Get mocks base method.
func (m *MockStream) Get(ctx context.Context, id string) (chan events.LogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(chan events.LogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStreamMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStream)(nil).Get), ctx, id)
}

// Init mocks base method.
func (m *MockStream) Init(ctx context.Context, id string) (StreamMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, id)
	ret0, _ := ret[0].(StreamMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockStreamMockRecorder) Init(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStream)(nil).Init), ctx, id)
}

// Name mocks base method.
func (m *MockStream) Name(parts ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range parts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Name", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStreamMockRecorder) Name(parts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStream)(nil).Name), parts...)
}

// Push mocks base method.
func (m *MockStream) Push(ctx context.Context, id string, log *events.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, id, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockStreamMockRecorder) Push(ctx, id, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockStream)(nil).Push), ctx, id, log)
}

// PushBytes mocks base method.
func (m *MockStream) PushBytes(ctx context.Context, id string, bytes []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushBytes", ctx, id, bytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushBytes indicates an expected call of PushBytes.
func (mr *MockStreamMockRecorder) PushBytes(ctx, id, bytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushBytes", reflect.TypeOf((*MockStream)(nil).PushBytes), ctx, id, bytes)
}

// Start mocks base method.
func (m *MockStream) Start(ctx context.Context, id string) (StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, id)
	ret0, _ := ret[0].(StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockStreamMockRecorder) Start(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStream)(nil).Start), ctx, id)
}

// Stop mocks base method.
func (m *MockStream) Stop(ctx context.Context, id string) (StreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, id)
	ret0, _ := ret[0].(StreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockStreamMockRecorder) Stop(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStream)(nil).Stop), ctx, id)
}
