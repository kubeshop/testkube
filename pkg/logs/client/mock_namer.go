// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/logs/client (interfaces: StreamNamer)
//
// Generated by this command:
//
//	mockgen -destination=./mock_namer.go -package=client github.com/kubeshop/testkube/pkg/logs/client StreamNamer
//

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStreamNamer is a mock of StreamNamer interface.
type MockStreamNamer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamNamerMockRecorder
	isgomock struct{}
}

// MockStreamNamerMockRecorder is the mock recorder for MockStreamNamer.
type MockStreamNamerMockRecorder struct {
	mock *MockStreamNamer
}

// NewMockStreamNamer creates a new mock instance.
func NewMockStreamNamer(ctrl *gomock.Controller) *MockStreamNamer {
	mock := &MockStreamNamer{ctrl: ctrl}
	mock.recorder = &MockStreamNamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamNamer) EXPECT() *MockStreamNamerMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockStreamNamer) Name(parts ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range parts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Name", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStreamNamerMockRecorder) Name(parts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStreamNamer)(nil).Name), parts...)
}
