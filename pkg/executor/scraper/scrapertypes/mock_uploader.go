// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/executor/scraper/scrapertypes (interfaces: Uploader)
//
// Generated by this command:
//
//	mockgen -destination=./mock_uploader.go -package=scrapertypes github.com/kubeshop/testkube/pkg/executor/scraper/scrapertypes Uploader
//

// Package scrapertypes is a generated GoMock package.
package scrapertypes

import (
	context "context"
	reflect "reflect"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	gomock "go.uber.org/mock/gomock"
)

// MockUploader is a mock of Uploader interface.
type MockUploader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderMockRecorder
	isgomock struct{}
}

// MockUploaderMockRecorder is the mock recorder for MockUploader.
type MockUploaderMockRecorder struct {
	mock *MockUploader
}

// NewMockUploader creates a new mock instance.
func NewMockUploader(ctrl *gomock.Controller) *MockUploader {
	mock := &MockUploader{ctrl: ctrl}
	mock.recorder = &MockUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploader) EXPECT() *MockUploaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUploader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUploaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUploader)(nil).Close))
}

// Upload mocks base method.
func (m *MockUploader) Upload(ctx context.Context, object *Object, execution testkube.Execution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, object, execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockUploaderMockRecorder) Upload(ctx, object, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUploader)(nil).Upload), ctx, object, execution)
}
