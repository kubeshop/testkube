// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/executor/client (interfaces: Executor)
//
// Generated by this command:
//
//	mockgen -destination=./mock_executor.go -package=client github.com/kubeshop/testkube/pkg/executor/client Executor
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	output "github.com/kubeshop/testkube/pkg/executor/output"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockExecutor) Abort(ctx context.Context, execution *testkube.Execution) (*testkube.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", ctx, execution)
	ret0, _ := ret[0].(*testkube.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Abort indicates an expected call of Abort.
func (mr *MockExecutorMockRecorder) Abort(ctx, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockExecutor)(nil).Abort), ctx, execution)
}

// Execute mocks base method.
func (m *MockExecutor) Execute(ctx context.Context, execution *testkube.Execution, options ExecuteOptions) (*testkube.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, execution, options)
	ret0, _ := ret[0].(*testkube.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockExecutorMockRecorder) Execute(ctx, execution, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutor)(nil).Execute), ctx, execution, options)
}

// Logs mocks base method.
func (m *MockExecutor) Logs(ctx context.Context, id, namespace string) (chan output.Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", ctx, id, namespace)
	ret0, _ := ret[0].(chan output.Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockExecutorMockRecorder) Logs(ctx, id, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockExecutor)(nil).Logs), ctx, id, namespace)
}
