// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/dbmigrator (interfaces: Database)
//
// Generated by this command:
//
//	mockgen -destination=./mock_database.go -package=dbmigrator github.com/kubeshop/testkube/pkg/dbmigrator Database
//

// Package dbmigrator is a generated GoMock package.
package dbmigrator

import (
	context "context"
	reflect "reflect"

	bson "go.mongodb.org/mongo-driver/bson"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// DeleteMigrationState mocks base method.
func (m *MockDatabase) DeleteMigrationState(ctx context.Context, migration *DbMigration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMigrationState", ctx, migration)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMigrationState indicates an expected call of DeleteMigrationState.
func (mr *MockDatabaseMockRecorder) DeleteMigrationState(ctx, migration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigrationState", reflect.TypeOf((*MockDatabase)(nil).DeleteMigrationState), ctx, migration)
}

// GetAppliedMigrations mocks base method.
func (m *MockDatabase) GetAppliedMigrations(ctx context.Context) ([]DbMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedMigrations", ctx)
	ret0, _ := ret[0].([]DbMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedMigrations indicates an expected call of GetAppliedMigrations.
func (mr *MockDatabaseMockRecorder) GetAppliedMigrations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedMigrations", reflect.TypeOf((*MockDatabase)(nil).GetAppliedMigrations), ctx)
}

// InsertMigrationState mocks base method.
func (m *MockDatabase) InsertMigrationState(ctx context.Context, migration *DbMigration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMigrationState", ctx, migration)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMigrationState indicates an expected call of InsertMigrationState.
func (mr *MockDatabaseMockRecorder) InsertMigrationState(ctx, migration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMigrationState", reflect.TypeOf((*MockDatabase)(nil).InsertMigrationState), ctx, migration)
}

// RunCommands mocks base method.
func (m *MockDatabase) RunCommands(ctx context.Context, commands []bson.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommands", ctx, commands)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommands indicates an expected call of RunCommands.
func (mr *MockDatabaseMockRecorder) RunCommands(ctx, commands any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommands", reflect.TypeOf((*MockDatabase)(nil).RunCommands), ctx, commands)
}
