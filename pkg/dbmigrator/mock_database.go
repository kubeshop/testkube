// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/dbmigrator (interfaces: Database)

// Package dbmigrator is a generated GoMock package.
package dbmigrator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/v2/bson"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// DeleteMigrationState mocks base method.
func (m *MockDatabase) DeleteMigrationState(arg0 context.Context, arg1 *DbMigration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMigrationState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMigrationState indicates an expected call of DeleteMigrationState.
func (mr *MockDatabaseMockRecorder) DeleteMigrationState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMigrationState", reflect.TypeOf((*MockDatabase)(nil).DeleteMigrationState), arg0, arg1)
}

// GetAppliedMigrations mocks base method.
func (m *MockDatabase) GetAppliedMigrations(arg0 context.Context) ([]DbMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedMigrations", arg0)
	ret0, _ := ret[0].([]DbMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedMigrations indicates an expected call of GetAppliedMigrations.
func (mr *MockDatabaseMockRecorder) GetAppliedMigrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedMigrations", reflect.TypeOf((*MockDatabase)(nil).GetAppliedMigrations), arg0)
}

// InsertMigrationState mocks base method.
func (m *MockDatabase) InsertMigrationState(arg0 context.Context, arg1 *DbMigration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMigrationState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMigrationState indicates an expected call of InsertMigrationState.
func (mr *MockDatabaseMockRecorder) InsertMigrationState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMigrationState", reflect.TypeOf((*MockDatabase)(nil).InsertMigrationState), arg0, arg1)
}

// RunCommands mocks base method.
func (m *MockDatabase) RunCommands(arg0 context.Context, arg1 []bson.D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommands", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommands indicates an expected call of RunCommands.
func (mr *MockDatabaseMockRecorder) RunCommands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommands", reflect.TypeOf((*MockDatabase)(nil).RunCommands), arg0, arg1)
}
