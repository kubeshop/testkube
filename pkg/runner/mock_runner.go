// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/runner (interfaces: Runner)
//
// Generated by this command:
//
//	mockgen -destination=./mock_runner.go -package=runner github.com/kubeshop/testkube/pkg/runner Runner
//

// Package runner is a generated GoMock package.
package runner

import (
	context "context"
	reflect "reflect"

	executionworkertypes "github.com/kubeshop/testkube/pkg/testworkflows/executionworker/executionworkertypes"
	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
	isgomock struct{}
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockRunner) Abort(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockRunnerMockRecorder) Abort(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockRunner)(nil).Abort), id)
}

// Cancel mocks base method.
func (m *MockRunner) Cancel(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockRunnerMockRecorder) Cancel(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockRunner)(nil).Cancel), id)
}

// Execute mocks base method.
func (m *MockRunner) Execute(request executionworkertypes.ExecuteRequest) (*executionworkertypes.ExecuteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", request)
	ret0, _ := ret[0].(*executionworkertypes.ExecuteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockRunnerMockRecorder) Execute(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRunner)(nil).Execute), request)
}

// Monitor mocks base method.
func (m *MockRunner) Monitor(ctx context.Context, organizationId, environmentId, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Monitor", ctx, organizationId, environmentId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Monitor indicates an expected call of Monitor.
func (mr *MockRunnerMockRecorder) Monitor(ctx, organizationId, environmentId, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Monitor", reflect.TypeOf((*MockRunner)(nil).Monitor), ctx, organizationId, environmentId, id)
}

// Notifications mocks base method.
func (m *MockRunner) Notifications(ctx context.Context, id string) executionworkertypes.NotificationsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications", ctx, id)
	ret0, _ := ret[0].(executionworkertypes.NotificationsWatcher)
	return ret0
}

// Notifications indicates an expected call of Notifications.
func (mr *MockRunnerMockRecorder) Notifications(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockRunner)(nil).Notifications), ctx, id)
}

// Pause mocks base method.
func (m *MockRunner) Pause(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockRunnerMockRecorder) Pause(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockRunner)(nil).Pause), id)
}

// Resume mocks base method.
func (m *MockRunner) Resume(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockRunnerMockRecorder) Resume(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockRunner)(nil).Resume), id)
}
