// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/runner (interfaces: Runner)

// Package runner is a generated GoMock package.
package runner

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	executionworkertypes "github.com/kubeshop/testkube/pkg/testworkflows/executionworker/executionworkertypes"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockRunner) Abort(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockRunnerMockRecorder) Abort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockRunner)(nil).Abort), arg0)
}

// Execute mocks base method.
func (m *MockRunner) Execute(arg0 executionworkertypes.ExecuteRequest) (*executionworkertypes.ExecuteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*executionworkertypes.ExecuteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockRunnerMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRunner)(nil).Execute), arg0)
}

// Monitor mocks base method.
func (m *MockRunner) Monitor(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Monitor", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Monitor indicates an expected call of Monitor.
func (mr *MockRunnerMockRecorder) Monitor(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Monitor", reflect.TypeOf((*MockRunner)(nil).Monitor), arg0, arg1, arg2, arg3)
}

// Notifications mocks base method.
func (m *MockRunner) Notifications(arg0 context.Context, arg1 string) executionworkertypes.NotificationsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications", arg0, arg1)
	ret0, _ := ret[0].(executionworkertypes.NotificationsWatcher)
	return ret0
}

// Notifications indicates an expected call of Notifications.
func (mr *MockRunnerMockRecorder) Notifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockRunner)(nil).Notifications), arg0, arg1)
}

// Pause mocks base method.
func (m *MockRunner) Pause(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockRunnerMockRecorder) Pause(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockRunner)(nil).Pause), arg0)
}

// Resume mocks base method.
func (m *MockRunner) Resume(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockRunnerMockRecorder) Resume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockRunner)(nil).Resume), arg0)
}
