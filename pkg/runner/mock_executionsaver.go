// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/runner (interfaces: ExecutionSaver)
//
// Generated by this command:
//
//	mockgen -destination=./mock_executionsaver.go -package=runner github.com/kubeshop/testkube/pkg/runner ExecutionSaver
//

// Package runner is a generated GoMock package.
package runner

import (
	context "context"
	reflect "reflect"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutionSaver is a mock of ExecutionSaver interface.
type MockExecutionSaver struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionSaverMockRecorder
	isgomock struct{}
}

// MockExecutionSaverMockRecorder is the mock recorder for MockExecutionSaver.
type MockExecutionSaverMockRecorder struct {
	mock *MockExecutionSaver
}

// NewMockExecutionSaver creates a new mock instance.
func NewMockExecutionSaver(ctrl *gomock.Controller) *MockExecutionSaver {
	mock := &MockExecutionSaver{ctrl: ctrl}
	mock.recorder = &MockExecutionSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionSaver) EXPECT() *MockExecutionSaverMockRecorder {
	return m.recorder
}

// AppendOutput mocks base method.
func (m *MockExecutionSaver) AppendOutput(output ...testkube.TestWorkflowOutput) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range output {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AppendOutput", varargs...)
}

// AppendOutput indicates an expected call of AppendOutput.
func (mr *MockExecutionSaverMockRecorder) AppendOutput(output ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendOutput", reflect.TypeOf((*MockExecutionSaver)(nil).AppendOutput), output...)
}

// End mocks base method.
func (m *MockExecutionSaver) End(ctx context.Context, result testkube.TestWorkflowResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "End", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// End indicates an expected call of End.
func (mr *MockExecutionSaverMockRecorder) End(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockExecutionSaver)(nil).End), ctx, result)
}

// UpdateResult mocks base method.
func (m *MockExecutionSaver) UpdateResult(result testkube.TestWorkflowResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateResult", result)
}

// UpdateResult indicates an expected call of UpdateResult.
func (mr *MockExecutionSaverMockRecorder) UpdateResult(result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResult", reflect.TypeOf((*MockExecutionSaver)(nil).UpdateResult), result)
}
