// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sequences.sql

package sqlc

import (
	"context"
)

const countExecutionSequences = `-- name: CountExecutionSequences :one
SELECT COUNT(*) FROM execution_sequences
`

func (q *Queries) CountExecutionSequences(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countExecutionSequences)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAllExecutionSequences = `-- name: DeleteAllExecutionSequences :exec
DELETE FROM execution_sequences
`

func (q *Queries) DeleteAllExecutionSequences(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllExecutionSequences)
	return err
}

const deleteExecutionSequence = `-- name: DeleteExecutionSequence :exec
DELETE FROM execution_sequences WHERE name = $1
`

func (q *Queries) DeleteExecutionSequence(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteExecutionSequence, name)
	return err
}

const deleteExecutionSequences = `-- name: DeleteExecutionSequences :exec
DELETE FROM execution_sequences WHERE name = ANY($1)
`

func (q *Queries) DeleteExecutionSequences(ctx context.Context, names []string) error {
	_, err := q.db.Exec(ctx, deleteExecutionSequences, names)
	return err
}

const getAllExecutionSequences = `-- name: GetAllExecutionSequences :many
SELECT name, number, created_at, updated_at
FROM execution_sequences 
ORDER BY created_at DESC
`

func (q *Queries) GetAllExecutionSequences(ctx context.Context) ([]ExecutionSequence, error) {
	rows, err := q.db.Query(ctx, getAllExecutionSequences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExecutionSequence
	for rows.Next() {
		var i ExecutionSequence
		if err := rows.Scan(
			&i.Name,
			&i.Number,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExecutionSequence = `-- name: GetExecutionSequence :one

SELECT name, number, created_at, updated_at
FROM execution_sequences 
WHERE name = $1
`

// Code generated by AI Assistant
func (q *Queries) GetExecutionSequence(ctx context.Context, name string) (ExecutionSequence, error) {
	row := q.db.QueryRow(ctx, getExecutionSequence, name)
	var i ExecutionSequence
	err := row.Scan(
		&i.Name,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExecutionSequencesByNames = `-- name: GetExecutionSequencesByNames :many
SELECT name, number, created_at, updated_at
FROM execution_sequences 
WHERE name = ANY($1)
ORDER BY name
`

func (q *Queries) GetExecutionSequencesByNames(ctx context.Context, names []string) ([]ExecutionSequence, error) {
	rows, err := q.db.Query(ctx, getExecutionSequencesByNames, names)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExecutionSequence
	for rows.Next() {
		var i ExecutionSequence
		if err := rows.Scan(
			&i.Name,
			&i.Number,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAndIncrementExecutionSequence = `-- name: UpsertAndIncrementExecutionSequence :one
INSERT INTO execution_sequences (name, number)
VALUES ($1, 1)
ON CONFLICT (name) DO UPDATE SET
    number = execution_sequences.number + 1,
    updated_at = NOW()
RETURNING name, number, created_at, updated_at
`

func (q *Queries) UpsertAndIncrementExecutionSequence(ctx context.Context, name string) (ExecutionSequence, error) {
	row := q.db.QueryRow(ctx, upsertAndIncrementExecutionSequence, name)
	var i ExecutionSequence
	err := row.Scan(
		&i.Name,
		&i.Number,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
