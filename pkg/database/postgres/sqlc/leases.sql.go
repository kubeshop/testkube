// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: leases.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findLeaseById = `-- name: FindLeaseById :one
SELECT id, identifier, cluster_id, acquired_at, renewed_at, created_at, updated_at
FROM leases 
WHERE id = $1
`

func (q *Queries) FindLeaseById(ctx context.Context, leaseID string) (Lease, error) {
	row := q.db.QueryRow(ctx, findLeaseById, leaseID)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.ClusterID,
		&i.AcquiredAt,
		&i.RenewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertLease = `-- name: InsertLease :one
INSERT INTO leases (id, identifier, cluster_id, acquired_at, renewed_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, identifier, cluster_id, acquired_at, renewed_at, created_at, updated_at
`

type InsertLeaseParams struct {
	ID         string             `db:"id" json:"id"`
	Identifier string             `db:"identifier" json:"identifier"`
	ClusterID  string             `db:"cluster_id" json:"cluster_id"`
	AcquiredAt pgtype.Timestamptz `db:"acquired_at" json:"acquired_at"`
	RenewedAt  pgtype.Timestamptz `db:"renewed_at" json:"renewed_at"`
}

func (q *Queries) InsertLease(ctx context.Context, arg InsertLeaseParams) (Lease, error) {
	row := q.db.QueryRow(ctx, insertLease,
		arg.ID,
		arg.Identifier,
		arg.ClusterID,
		arg.AcquiredAt,
		arg.RenewedAt,
	)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.ClusterID,
		&i.AcquiredAt,
		&i.RenewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLease = `-- name: UpdateLease :one
UPDATE leases 
SET 
    identifier = $1,
    cluster_id = $2,
    acquired_at = $3,
    renewed_at = $4,
    updated_at = NOW()
WHERE id = $5
RETURNING id, identifier, cluster_id, acquired_at, renewed_at, created_at, updated_at
`

type UpdateLeaseParams struct {
	Identifier string             `db:"identifier" json:"identifier"`
	ClusterID  string             `db:"cluster_id" json:"cluster_id"`
	AcquiredAt pgtype.Timestamptz `db:"acquired_at" json:"acquired_at"`
	RenewedAt  pgtype.Timestamptz `db:"renewed_at" json:"renewed_at"`
	ID         string             `db:"id" json:"id"`
}

func (q *Queries) UpdateLease(ctx context.Context, arg UpdateLeaseParams) (Lease, error) {
	row := q.db.QueryRow(ctx, updateLease,
		arg.Identifier,
		arg.ClusterID,
		arg.AcquiredAt,
		arg.RenewedAt,
		arg.ID,
	)
	var i Lease
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.ClusterID,
		&i.AcquiredAt,
		&i.RenewedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
