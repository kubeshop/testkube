// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: configs.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createConfigIfNotExists = `-- name: CreateConfigIfNotExists :exec
INSERT INTO configs (id, cluster_id, enable_telemetry)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO NOTHING
`

type CreateConfigIfNotExistsParams struct {
	ID              string      `db:"id" json:"id"`
	ClusterID       string      `db:"cluster_id" json:"cluster_id"`
	EnableTelemetry pgtype.Bool `db:"enable_telemetry" json:"enable_telemetry"`
}

func (q *Queries) CreateConfigIfNotExists(ctx context.Context, arg CreateConfigIfNotExistsParams) error {
	_, err := q.db.Exec(ctx, createConfigIfNotExists, arg.ID, arg.ClusterID, arg.EnableTelemetry)
	return err
}

const getClusterId = `-- name: GetClusterId :one
SELECT cluster_id FROM configs WHERE id = $1
`

func (q *Queries) GetClusterId(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, getClusterId, id)
	var cluster_id string
	err := row.Scan(&cluster_id)
	return cluster_id, err
}

const getConfig = `-- name: GetConfig :one
SELECT id, cluster_id, enable_telemetry, created_at, updated_at 
FROM configs 
WHERE id = $1
`

func (q *Queries) GetConfig(ctx context.Context, id string) (Config, error) {
	row := q.db.QueryRow(ctx, getConfig, id)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.EnableTelemetry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConfigByFixedId = `-- name: GetConfigByFixedId :one
SELECT id, cluster_id, enable_telemetry, created_at, updated_at 
FROM configs 
WHERE id = 'api'
`

func (q *Queries) GetConfigByFixedId(ctx context.Context) (Config, error) {
	row := q.db.QueryRow(ctx, getConfigByFixedId)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.EnableTelemetry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTelemetryEnabled = `-- name: GetTelemetryEnabled :one
SELECT enable_telemetry FROM configs WHERE id = $1
`

func (q *Queries) GetTelemetryEnabled(ctx context.Context, id string) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, getTelemetryEnabled, id)
	var enable_telemetry pgtype.Bool
	err := row.Scan(&enable_telemetry)
	return enable_telemetry, err
}

const updateClusterId = `-- name: UpdateClusterId :exec
UPDATE configs 
SET cluster_id = $1, updated_at = NOW()
WHERE id = $2
`

type UpdateClusterIdParams struct {
	ClusterID string `db:"cluster_id" json:"cluster_id"`
	ID        string `db:"id" json:"id"`
}

func (q *Queries) UpdateClusterId(ctx context.Context, arg UpdateClusterIdParams) error {
	_, err := q.db.Exec(ctx, updateClusterId, arg.ClusterID, arg.ID)
	return err
}

const updateTelemetryEnabled = `-- name: UpdateTelemetryEnabled :exec
UPDATE configs 
SET enable_telemetry = $1, updated_at = NOW()
WHERE id = $2
`

type UpdateTelemetryEnabledParams struct {
	EnableTelemetry pgtype.Bool `db:"enable_telemetry" json:"enable_telemetry"`
	ID              string      `db:"id" json:"id"`
}

func (q *Queries) UpdateTelemetryEnabled(ctx context.Context, arg UpdateTelemetryEnabledParams) error {
	_, err := q.db.Exec(ctx, updateTelemetryEnabled, arg.EnableTelemetry, arg.ID)
	return err
}

const upsertConfig = `-- name: UpsertConfig :one
INSERT INTO configs (id, cluster_id, enable_telemetry)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO UPDATE SET
    cluster_id = EXCLUDED.cluster_id,
    enable_telemetry = EXCLUDED.enable_telemetry,
    updated_at = NOW()
RETURNING id, cluster_id, enable_telemetry, created_at, updated_at
`

type UpsertConfigParams struct {
	ID              string      `db:"id" json:"id"`
	ClusterID       string      `db:"cluster_id" json:"cluster_id"`
	EnableTelemetry pgtype.Bool `db:"enable_telemetry" json:"enable_telemetry"`
}

func (q *Queries) UpsertConfig(ctx context.Context, arg UpsertConfigParams) (Config, error) {
	row := q.db.QueryRow(ctx, upsertConfig, arg.ID, arg.ClusterID, arg.EnableTelemetry)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.EnableTelemetry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
