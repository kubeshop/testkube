// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/operator/client/testworkflows/v1 (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -destination=./mock_testworkflows.go -package=v1 github.com/kubeshop/testkube/pkg/operator/client/testworkflows/v1 Interface
//

// Package v1 is a generated GoMock package.
package v1

import (
	reflect "reflect"

	v1 "github.com/kubeshop/testkube/api/testworkflows/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockInterface) Apply(workflow *v1.TestWorkflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockInterfaceMockRecorder) Apply(workflow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockInterface)(nil).Apply), workflow)
}

// Create mocks base method.
func (m *MockInterface) Create(workflow *v1.TestWorkflow) (*v1.TestWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", workflow)
	ret0, _ := ret[0].(*v1.TestWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInterfaceMockRecorder) Create(workflow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterface)(nil).Create), workflow)
}

// Delete mocks base method.
func (m *MockInterface) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInterfaceMockRecorder) Delete(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterface)(nil).Delete), name)
}

// DeleteAll mocks base method.
func (m *MockInterface) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockInterfaceMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockInterface)(nil).DeleteAll))
}

// DeleteByLabels mocks base method.
func (m *MockInterface) DeleteByLabels(selector string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByLabels", selector)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByLabels indicates an expected call of DeleteByLabels.
func (mr *MockInterfaceMockRecorder) DeleteByLabels(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByLabels", reflect.TypeOf((*MockInterface)(nil).DeleteByLabels), selector)
}

// Get mocks base method.
func (m *MockInterface) Get(name string) (*v1.TestWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.TestWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), name)
}

// List mocks base method.
func (m *MockInterface) List(selector string) (*v1.TestWorkflowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].(*v1.TestWorkflowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInterfaceMockRecorder) List(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInterface)(nil).List), selector)
}

// ListLabels mocks base method.
func (m *MockInterface) ListLabels() (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabels")
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabels indicates an expected call of ListLabels.
func (mr *MockInterfaceMockRecorder) ListLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabels", reflect.TypeOf((*MockInterface)(nil).ListLabels))
}

// Update mocks base method.
func (m *MockInterface) Update(workflow *v1.TestWorkflow) (*v1.TestWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", workflow)
	ret0, _ := ret[0].(*v1.TestWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInterfaceMockRecorder) Update(workflow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInterface)(nil).Update), workflow)
}

// UpdateStatus mocks base method.
func (m *MockInterface) UpdateStatus(workflow *v1.TestWorkflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", workflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockInterfaceMockRecorder) UpdateStatus(workflow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockInterface)(nil).UpdateStatus), workflow)
}
