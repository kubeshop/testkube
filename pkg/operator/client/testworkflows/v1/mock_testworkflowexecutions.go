// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/operator/client/testworkflows/v1 (interfaces: TestWorkflowExecutionsInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mock_testworkflowexecutions.go -package=v1 github.com/kubeshop/testkube/pkg/operator/client/testworkflows/v1 TestWorkflowExecutionsInterface
//

// Package v1 is a generated GoMock package.
package v1

import (
	reflect "reflect"

	v1 "github.com/kubeshop/testkube/api/testworkflows/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockTestWorkflowExecutionsInterface is a mock of TestWorkflowExecutionsInterface interface.
type MockTestWorkflowExecutionsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTestWorkflowExecutionsInterfaceMockRecorder
	isgomock struct{}
}

// MockTestWorkflowExecutionsInterfaceMockRecorder is the mock recorder for MockTestWorkflowExecutionsInterface.
type MockTestWorkflowExecutionsInterfaceMockRecorder struct {
	mock *MockTestWorkflowExecutionsInterface
}

// NewMockTestWorkflowExecutionsInterface creates a new mock instance.
func NewMockTestWorkflowExecutionsInterface(ctrl *gomock.Controller) *MockTestWorkflowExecutionsInterface {
	mock := &MockTestWorkflowExecutionsInterface{ctrl: ctrl}
	mock.recorder = &MockTestWorkflowExecutionsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWorkflowExecutionsInterface) EXPECT() *MockTestWorkflowExecutionsInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestWorkflowExecutionsInterface) Create(testWorkflowExecution *v1.TestWorkflowExecution) (*v1.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", testWorkflowExecution)
	ret0, _ := ret[0].(*v1.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTestWorkflowExecutionsInterfaceMockRecorder) Create(testWorkflowExecution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestWorkflowExecutionsInterface)(nil).Create), testWorkflowExecution)
}

// Delete mocks base method.
func (m *MockTestWorkflowExecutionsInterface) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTestWorkflowExecutionsInterfaceMockRecorder) Delete(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTestWorkflowExecutionsInterface)(nil).Delete), name)
}

// Get mocks base method.
func (m *MockTestWorkflowExecutionsInterface) Get(name string) (*v1.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTestWorkflowExecutionsInterfaceMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTestWorkflowExecutionsInterface)(nil).Get), name)
}

// Update mocks base method.
func (m *MockTestWorkflowExecutionsInterface) Update(testWorkflowExecution *v1.TestWorkflowExecution) (*v1.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", testWorkflowExecution)
	ret0, _ := ret[0].(*v1.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTestWorkflowExecutionsInterfaceMockRecorder) Update(testWorkflowExecution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestWorkflowExecutionsInterface)(nil).Update), testWorkflowExecution)
}

// UpdateStatus mocks base method.
func (m *MockTestWorkflowExecutionsInterface) UpdateStatus(testWorkflow햇xecution *v1.TestWorkflowExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", testWorkflow햇xecution)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockTestWorkflowExecutionsInterfaceMockRecorder) UpdateStatus(testWorkflow햇xecution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockTestWorkflowExecutionsInterface)(nil).UpdateStatus), testWorkflow햇xecution)
}
