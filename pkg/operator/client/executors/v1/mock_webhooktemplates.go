// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/operator/client/executors/v1 (interfaces: WebhookTemplatesInterface)
//
// Generated by this command:
//
//	mockgen -destination=./mock_webhooktemplates.go -package=executors github.com/kubeshop/testkube/pkg/operator/client/executors/v1 WebhookTemplatesInterface
//

// Package executors is a generated GoMock package.
package executors

import (
	reflect "reflect"

	v1 "github.com/kubeshop/testkube/api/executor/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookTemplatesInterface is a mock of WebhookTemplatesInterface interface.
type MockWebhookTemplatesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookTemplatesInterfaceMockRecorder
	isgomock struct{}
}

// MockWebhookTemplatesInterfaceMockRecorder is the mock recorder for MockWebhookTemplatesInterface.
type MockWebhookTemplatesInterfaceMockRecorder struct {
	mock *MockWebhookTemplatesInterface
}

// NewMockWebhookTemplatesInterface creates a new mock instance.
func NewMockWebhookTemplatesInterface(ctrl *gomock.Controller) *MockWebhookTemplatesInterface {
	mock := &MockWebhookTemplatesInterface{ctrl: ctrl}
	mock.recorder = &MockWebhookTemplatesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookTemplatesInterface) EXPECT() *MockWebhookTemplatesInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWebhookTemplatesInterface) Create(webhookTemplate *v1.WebhookTemplate) (*v1.WebhookTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", webhookTemplate)
	ret0, _ := ret[0].(*v1.WebhookTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWebhookTemplatesInterfaceMockRecorder) Create(webhookTemplate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWebhookTemplatesInterface)(nil).Create), webhookTemplate)
}

// Delete mocks base method.
func (m *MockWebhookTemplatesInterface) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWebhookTemplatesInterfaceMockRecorder) Delete(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWebhookTemplatesInterface)(nil).Delete), name)
}

// DeleteByLabels mocks base method.
func (m *MockWebhookTemplatesInterface) DeleteByLabels(selector string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByLabels", selector)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByLabels indicates an expected call of DeleteByLabels.
func (mr *MockWebhookTemplatesInterfaceMockRecorder) DeleteByLabels(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByLabels", reflect.TypeOf((*MockWebhookTemplatesInterface)(nil).DeleteByLabels), selector)
}

// Get mocks base method.
func (m *MockWebhookTemplatesInterface) Get(name string) (*v1.WebhookTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.WebhookTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWebhookTemplatesInterfaceMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebhookTemplatesInterface)(nil).Get), name)
}

// GetByEvent mocks base method.
func (m *MockWebhookTemplatesInterface) GetByEvent(event v1.EventType) (*v1.WebhookTemplateList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEvent", event)
	ret0, _ := ret[0].(*v1.WebhookTemplateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEvent indicates an expected call of GetByEvent.
func (mr *MockWebhookTemplatesInterfaceMockRecorder) GetByEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEvent", reflect.TypeOf((*MockWebhookTemplatesInterface)(nil).GetByEvent), event)
}

// List mocks base method.
func (m *MockWebhookTemplatesInterface) List(selector string) (*v1.WebhookTemplateList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].(*v1.WebhookTemplateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWebhookTemplatesInterfaceMockRecorder) List(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWebhookTemplatesInterface)(nil).List), selector)
}

// Update mocks base method.
func (m *MockWebhookTemplatesInterface) Update(webhookTemplate *v1.WebhookTemplate) (*v1.WebhookTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", webhookTemplate)
	ret0, _ := ret[0].(*v1.WebhookTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWebhookTemplatesInterfaceMockRecorder) Update(webhookTemplate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWebhookTemplatesInterface)(nil).Update), webhookTemplate)
}
