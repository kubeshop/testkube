// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/operator/cronjob/manager (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -destination=./mock_client.go -package=manager github.com/kubeshop/testkube/pkg/operator/cronjob/manager Interface
//

// Package manager is a generated GoMock package.
package manager

import (
	context "context"
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CleanForNewArchitecture mocks base method.
func (m *MockInterface) CleanForNewArchitecture(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanForNewArchitecture", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanForNewArchitecture indicates an expected call of CleanForNewArchitecture.
func (mr *MockInterfaceMockRecorder) CleanForNewArchitecture(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanForNewArchitecture", reflect.TypeOf((*MockInterface)(nil).CleanForNewArchitecture), ctx)
}

// IsNamespaceForNewArchitecture mocks base method.
func (m *MockInterface) IsNamespaceForNewArchitecture(namespace string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNamespaceForNewArchitecture", namespace)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNamespaceForNewArchitecture indicates an expected call of IsNamespaceForNewArchitecture.
func (mr *MockInterfaceMockRecorder) IsNamespaceForNewArchitecture(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNamespaceForNewArchitecture", reflect.TypeOf((*MockInterface)(nil).IsNamespaceForNewArchitecture), namespace)
}

// Reconcile mocks base method.
func (m *MockInterface) Reconcile(ctx context.Context, log logr.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockInterfaceMockRecorder) Reconcile(ctx, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockInterface)(nil).Reconcile), ctx, log)
}
