// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/storage (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=./storage_mock.go -package=storage github.com/kubeshop/testkube/pkg/storage Client
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	minio "github.com/minio/minio-go/v7"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockClient) BucketExists(ctx context.Context, bucket string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucket)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockClientMockRecorder) BucketExists(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockClient)(nil).BucketExists), ctx, bucket)
}

// CreateBucket mocks base method.
func (m *MockClient) CreateBucket(ctx context.Context, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", ctx, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockClientMockRecorder) CreateBucket(ctx, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockClient)(nil).CreateBucket), ctx, bucket)
}

// DeleteBucket mocks base method.
func (m *MockClient) DeleteBucket(ctx context.Context, bucket string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", ctx, bucket, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockClientMockRecorder) DeleteBucket(ctx, bucket, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockClient)(nil).DeleteBucket), ctx, bucket, force)
}

// DeleteFile mocks base method.
func (m *MockClient) DeleteFile(ctx context.Context, bucketFolder, file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, bucketFolder, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockClientMockRecorder) DeleteFile(ctx, bucketFolder, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockClient)(nil).DeleteFile), ctx, bucketFolder, file)
}

// DeleteFileFromBucket mocks base method.
func (m *MockClient) DeleteFileFromBucket(ctx context.Context, bucket, bucketFolder, file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileFromBucket", ctx, bucket, bucketFolder, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileFromBucket indicates an expected call of DeleteFileFromBucket.
func (mr *MockClientMockRecorder) DeleteFileFromBucket(ctx, bucket, bucketFolder, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileFromBucket", reflect.TypeOf((*MockClient)(nil).DeleteFileFromBucket), ctx, bucket, bucketFolder, file)
}

// DownloadArchive mocks base method.
func (m *MockClient) DownloadArchive(ctx context.Context, bucketFolder string, masks []string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadArchive", ctx, bucketFolder, masks)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadArchive indicates an expected call of DownloadArchive.
func (mr *MockClientMockRecorder) DownloadArchive(ctx, bucketFolder, masks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadArchive", reflect.TypeOf((*MockClient)(nil).DownloadArchive), ctx, bucketFolder, masks)
}

// DownloadArchiveFromBucket mocks base method.
func (m *MockClient) DownloadArchiveFromBucket(ctx context.Context, bucket, bucketFolder string, masks []string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadArchiveFromBucket", ctx, bucket, bucketFolder, masks)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadArchiveFromBucket indicates an expected call of DownloadArchiveFromBucket.
func (mr *MockClientMockRecorder) DownloadArchiveFromBucket(ctx, bucket, bucketFolder, masks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadArchiveFromBucket", reflect.TypeOf((*MockClient)(nil).DownloadArchiveFromBucket), ctx, bucket, bucketFolder, masks)
}

// DownloadFile mocks base method.
func (m *MockClient) DownloadFile(ctx context.Context, bucketFolder, file string) (*minio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, bucketFolder, file)
	ret0, _ := ret[0].(*minio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockClientMockRecorder) DownloadFile(ctx, bucketFolder, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockClient)(nil).DownloadFile), ctx, bucketFolder, file)
}

// DownloadFileFromBucket mocks base method.
func (m *MockClient) DownloadFileFromBucket(ctx context.Context, bucket, bucketFolder, file string) (io.Reader, minio.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFileFromBucket", ctx, bucket, bucketFolder, file)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(minio.ObjectInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadFileFromBucket indicates an expected call of DownloadFileFromBucket.
func (mr *MockClientMockRecorder) DownloadFileFromBucket(ctx, bucket, bucketFolder, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFileFromBucket", reflect.TypeOf((*MockClient)(nil).DownloadFileFromBucket), ctx, bucket, bucketFolder, file)
}

// GetValidBucketName mocks base method.
func (m *MockClient) GetValidBucketName(parentType, parentName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidBucketName", parentType, parentName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidBucketName indicates an expected call of GetValidBucketName.
func (mr *MockClientMockRecorder) GetValidBucketName(parentType, parentName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidBucketName", reflect.TypeOf((*MockClient)(nil).GetValidBucketName), parentType, parentName)
}

// IsConnectionPossible mocks base method.
func (m *MockClient) IsConnectionPossible(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnectionPossible", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsConnectionPossible indicates an expected call of IsConnectionPossible.
func (mr *MockClientMockRecorder) IsConnectionPossible(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnectionPossible", reflect.TypeOf((*MockClient)(nil).IsConnectionPossible), ctx)
}

// ListBuckets mocks base method.
func (m *MockClient) ListBuckets(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuckets", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets.
func (mr *MockClientMockRecorder) ListBuckets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockClient)(nil).ListBuckets), ctx)
}

// ListFiles mocks base method.
func (m *MockClient) ListFiles(ctx context.Context, bucketFolder string) ([]testkube.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx, bucketFolder)
	ret0, _ := ret[0].([]testkube.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockClientMockRecorder) ListFiles(ctx, bucketFolder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockClient)(nil).ListFiles), ctx, bucketFolder)
}

// PlaceFiles mocks base method.
func (m *MockClient) PlaceFiles(ctx context.Context, bucketFolders []string, prefix string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceFiles", ctx, bucketFolders, prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlaceFiles indicates an expected call of PlaceFiles.
func (mr *MockClientMockRecorder) PlaceFiles(ctx, bucketFolders, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceFiles", reflect.TypeOf((*MockClient)(nil).PlaceFiles), ctx, bucketFolders, prefix)
}

// PresignDownloadFileFromBucket mocks base method.
func (m *MockClient) PresignDownloadFileFromBucket(ctx context.Context, bucket, bucketFolder, file string, expires time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignDownloadFileFromBucket", ctx, bucket, bucketFolder, file, expires)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignDownloadFileFromBucket indicates an expected call of PresignDownloadFileFromBucket.
func (mr *MockClientMockRecorder) PresignDownloadFileFromBucket(ctx, bucket, bucketFolder, file, expires any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignDownloadFileFromBucket", reflect.TypeOf((*MockClient)(nil).PresignDownloadFileFromBucket), ctx, bucket, bucketFolder, file, expires)
}

// PresignUploadFileToBucket mocks base method.
func (m *MockClient) PresignUploadFileToBucket(ctx context.Context, bucket, bucketFolder, filePath string, expires time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignUploadFileToBucket", ctx, bucket, bucketFolder, filePath, expires)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignUploadFileToBucket indicates an expected call of PresignUploadFileToBucket.
func (mr *MockClientMockRecorder) PresignUploadFileToBucket(ctx, bucket, bucketFolder, filePath, expires any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignUploadFileToBucket", reflect.TypeOf((*MockClient)(nil).PresignUploadFileToBucket), ctx, bucket, bucketFolder, filePath, expires)
}

// SaveFile mocks base method.
func (m *MockClient) SaveFile(ctx context.Context, bucketFolder, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, bucketFolder, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockClientMockRecorder) SaveFile(ctx, bucketFolder, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockClient)(nil).SaveFile), ctx, bucketFolder, filePath)
}

// UploadFile mocks base method.
func (m *MockClient) UploadFile(ctx context.Context, bucketFolder, filePath string, reader io.Reader, objectSize int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, bucketFolder, filePath, reader, objectSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockClientMockRecorder) UploadFile(ctx, bucketFolder, filePath, reader, objectSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockClient)(nil).UploadFile), ctx, bucketFolder, filePath, reader, objectSize)
}

// UploadFileToBucket mocks base method.
func (m *MockClient) UploadFileToBucket(ctx context.Context, bucket, bucketFolder, filePath string, reader io.Reader, objectSize int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileToBucket", ctx, bucket, bucketFolder, filePath, reader, objectSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFileToBucket indicates an expected call of UploadFileToBucket.
func (mr *MockClientMockRecorder) UploadFileToBucket(ctx, bucket, bucketFolder, filePath, reader, objectSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileToBucket", reflect.TypeOf((*MockClient)(nil).UploadFileToBucket), ctx, bucket, bucketFolder, filePath, reader, objectSize)
}
