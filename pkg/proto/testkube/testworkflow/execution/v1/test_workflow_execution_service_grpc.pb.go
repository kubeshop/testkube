// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: testkube/testworkflow/execution/v1/test_workflow_execution_service.proto

package executionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestWorkflowExecutionService_GetExecutionUpdates_FullMethodName = "/testkube.testworkflow.execution.v1.TestWorkflowExecutionService/GetExecutionUpdates"
)

// TestWorkflowExecutionServiceClient is the client API for TestWorkflowExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TestWorkflowExecutionService contains RPCs related to TestWorkflowExecutions.
type TestWorkflowExecutionServiceClient interface {
	// GetExecutionUpdates retrieves state transition imperatives from the Control Plane for
	// Executions that are understood by the Control Plane to be under the control of the
	// calling client.
	GetExecutionUpdates(ctx context.Context, in *GetExecutionUpdatesRequest, opts ...grpc.CallOption) (*GetExecutionUpdatesResponse, error)
}

type testWorkflowExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestWorkflowExecutionServiceClient(cc grpc.ClientConnInterface) TestWorkflowExecutionServiceClient {
	return &testWorkflowExecutionServiceClient{cc}
}

func (c *testWorkflowExecutionServiceClient) GetExecutionUpdates(ctx context.Context, in *GetExecutionUpdatesRequest, opts ...grpc.CallOption) (*GetExecutionUpdatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExecutionUpdatesResponse)
	err := c.cc.Invoke(ctx, TestWorkflowExecutionService_GetExecutionUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestWorkflowExecutionServiceServer is the server API for TestWorkflowExecutionService service.
// All implementations must embed UnimplementedTestWorkflowExecutionServiceServer
// for forward compatibility.
//
// TestWorkflowExecutionService contains RPCs related to TestWorkflowExecutions.
type TestWorkflowExecutionServiceServer interface {
	// GetExecutionUpdates retrieves state transition imperatives from the Control Plane for
	// Executions that are understood by the Control Plane to be under the control of the
	// calling client.
	GetExecutionUpdates(context.Context, *GetExecutionUpdatesRequest) (*GetExecutionUpdatesResponse, error)
	mustEmbedUnimplementedTestWorkflowExecutionServiceServer()
}

// UnimplementedTestWorkflowExecutionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestWorkflowExecutionServiceServer struct{}

func (UnimplementedTestWorkflowExecutionServiceServer) GetExecutionUpdates(context.Context, *GetExecutionUpdatesRequest) (*GetExecutionUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionUpdates not implemented")
}
func (UnimplementedTestWorkflowExecutionServiceServer) mustEmbedUnimplementedTestWorkflowExecutionServiceServer() {
}
func (UnimplementedTestWorkflowExecutionServiceServer) testEmbeddedByValue() {}

// UnsafeTestWorkflowExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestWorkflowExecutionServiceServer will
// result in compilation errors.
type UnsafeTestWorkflowExecutionServiceServer interface {
	mustEmbedUnimplementedTestWorkflowExecutionServiceServer()
}

func RegisterTestWorkflowExecutionServiceServer(s grpc.ServiceRegistrar, srv TestWorkflowExecutionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestWorkflowExecutionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestWorkflowExecutionService_ServiceDesc, srv)
}

func _TestWorkflowExecutionService_GetExecutionUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestWorkflowExecutionServiceServer).GetExecutionUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestWorkflowExecutionService_GetExecutionUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestWorkflowExecutionServiceServer).GetExecutionUpdates(ctx, req.(*GetExecutionUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestWorkflowExecutionService_ServiceDesc is the grpc.ServiceDesc for TestWorkflowExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestWorkflowExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testkube.testworkflow.execution.v1.TestWorkflowExecutionService",
	HandlerType: (*TestWorkflowExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExecutionUpdates",
			Handler:    _TestWorkflowExecutionService_GetExecutionUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testkube/testworkflow/execution/v1/test_workflow_execution_service.proto",
}
