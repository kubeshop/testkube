// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/service.proto

package cloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestKubeCloudAPIClient is the client API for TestKubeCloudAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestKubeCloudAPIClient interface {
	// Deprecated, use ExecuteAsync instead,
	// Will remove this after we fully migrate to ExecuteAsync.
	Execute(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_ExecuteClient, error)
	Send(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_SendClient, error)
	Call(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	ExecuteAsync(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_ExecuteAsyncClient, error)
	GetLogsStream(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetLogsStreamClient, error)
	GetTestWorkflowNotificationsStream(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetTestWorkflowNotificationsStreamClient, error)
	GetTestWorkflowServiceNotificationsStream(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetTestWorkflowServiceNotificationsStreamClient, error)
	GetTestWorkflowParallelStepNotificationsStream(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetTestWorkflowParallelStepNotificationsStreamClient, error)
	GetProContext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProContextResponse, error)
	GetCredential(ctx context.Context, in *CredentialRequest, opts ...grpc.CallOption) (*CredentialResponse, error)
	GetEventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_GetEventStreamClient, error)
	ScheduleExecution(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_ScheduleExecutionClient, error)
	// Runner
	GetUnfinishedExecutions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TestKubeCloudAPI_GetUnfinishedExecutionsClient, error)
	GetRunnerRequests(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetRunnerRequestsClient, error)
	InitExecution(ctx context.Context, in *InitExecutionRequest, opts ...grpc.CallOption) (*InitExecutionResponse, error)
	GetExecution(ctx context.Context, in *GetExecutionRequest, opts ...grpc.CallOption) (*GetExecutionResponse, error)
	UpdateExecutionResult(ctx context.Context, in *UpdateExecutionResultRequest, opts ...grpc.CallOption) (*UpdateExecutionResultResponse, error)
	UpdateExecutionOutput(ctx context.Context, in *UpdateExecutionOutputRequest, opts ...grpc.CallOption) (*UpdateExecutionOutputResponse, error)
	SaveExecutionLogsPresigned(ctx context.Context, in *SaveExecutionLogsPresignedRequest, opts ...grpc.CallOption) (*SaveExecutionLogsPresignedResponse, error)
	FinishExecution(ctx context.Context, in *FinishExecutionRequest, opts ...grpc.CallOption) (*FinishExecutionResponse, error)
	// Execution
	SaveExecutionArtifactPresigned(ctx context.Context, in *SaveExecutionArtifactPresignedRequest, opts ...grpc.CallOption) (*SaveExecutionArtifactPresignedResponse, error)
	AppendExecutionReport(ctx context.Context, in *AppendExecutionReportRequest, opts ...grpc.CallOption) (*AppendExecutionReportResponse, error)
	// CRD Synchronisation
	// -- Test Workflows
	GetTestWorkflow(ctx context.Context, in *GetTestWorkflowRequest, opts ...grpc.CallOption) (*GetTestWorkflowResponse, error)
	ListTestWorkflows(ctx context.Context, in *ListTestWorkflowsRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_ListTestWorkflowsClient, error)
	ListTestWorkflowLabels(ctx context.Context, in *ListTestWorkflowLabelsRequest, opts ...grpc.CallOption) (*ListTestWorkflowLabelsResponse, error)
	CreateTestWorkflow(ctx context.Context, in *CreateTestWorkflowRequest, opts ...grpc.CallOption) (*CreateTestWorkflowResponse, error)
	UpdateTestWorkflow(ctx context.Context, in *UpdateTestWorkflowRequest, opts ...grpc.CallOption) (*UpdateTestWorkflowResponse, error)
	DeleteTestWorkflow(ctx context.Context, in *DeleteTestWorkflowRequest, opts ...grpc.CallOption) (*DeleteTestWorkflowResponse, error)
	DeleteTestWorkflowsByLabels(ctx context.Context, in *DeleteTestWorkflowsByLabelsRequest, opts ...grpc.CallOption) (*DeleteTestWorkflowsByLabelsResponse, error)
	WatchTestWorkflowUpdates(ctx context.Context, in *WatchTestWorkflowUpdatesRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_WatchTestWorkflowUpdatesClient, error)
	// -- Test Workflow Templates
	GetTestWorkflowTemplate(ctx context.Context, in *GetTestWorkflowTemplateRequest, opts ...grpc.CallOption) (*GetTestWorkflowTemplateResponse, error)
	ListTestWorkflowTemplates(ctx context.Context, in *ListTestWorkflowTemplatesRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_ListTestWorkflowTemplatesClient, error)
	ListTestWorkflowTemplateLabels(ctx context.Context, in *ListTestWorkflowTemplateLabelsRequest, opts ...grpc.CallOption) (*ListTestWorkflowTemplateLabelsResponse, error)
	CreateTestWorkflowTemplate(ctx context.Context, in *CreateTestWorkflowTemplateRequest, opts ...grpc.CallOption) (*CreateTestWorkflowTemplateResponse, error)
	UpdateTestWorkflowTemplate(ctx context.Context, in *UpdateTestWorkflowTemplateRequest, opts ...grpc.CallOption) (*UpdateTestWorkflowTemplateResponse, error)
	DeleteTestWorkflowTemplate(ctx context.Context, in *DeleteTestWorkflowTemplateRequest, opts ...grpc.CallOption) (*DeleteTestWorkflowTemplateResponse, error)
	DeleteTestWorkflowTemplatesByLabels(ctx context.Context, in *DeleteTestWorkflowTemplatesByLabelsRequest, opts ...grpc.CallOption) (*DeleteTestWorkflowTemplatesByLabelsResponse, error)
	WatchTestWorkflowTemplateUpdates(ctx context.Context, in *WatchTestWorkflowTemplateUpdatesRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_WatchTestWorkflowTemplateUpdatesClient, error)
}

type testKubeCloudAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTestKubeCloudAPIClient(cc grpc.ClientConnInterface) TestKubeCloudAPIClient {
	return &testKubeCloudAPIClient{cc}
}

func (c *testKubeCloudAPIClient) Execute(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[0], "/cloud.TestKubeCloudAPI/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIExecuteClient{stream}
	return x, nil
}

type TestKubeCloudAPI_ExecuteClient interface {
	Send(*ExecuteResponse) error
	Recv() (*ExecuteRequest, error)
	grpc.ClientStream
}

type testKubeCloudAPIExecuteClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIExecuteClient) Send(m *ExecuteResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testKubeCloudAPIExecuteClient) Recv() (*ExecuteRequest, error) {
	m := new(ExecuteRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) Send(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[1], "/cloud.TestKubeCloudAPI/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPISendClient{stream}
	return x, nil
}

type TestKubeCloudAPI_SendClient interface {
	Send(*WebsocketData) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type testKubeCloudAPISendClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPISendClient) Send(m *WebsocketData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testKubeCloudAPISendClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) Call(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) ExecuteAsync(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_ExecuteAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[2], "/cloud.TestKubeCloudAPI/ExecuteAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIExecuteAsyncClient{stream}
	return x, nil
}

type TestKubeCloudAPI_ExecuteAsyncClient interface {
	Send(*ExecuteResponse) error
	Recv() (*ExecuteRequest, error)
	grpc.ClientStream
}

type testKubeCloudAPIExecuteAsyncClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIExecuteAsyncClient) Send(m *ExecuteResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testKubeCloudAPIExecuteAsyncClient) Recv() (*ExecuteRequest, error) {
	m := new(ExecuteRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) GetLogsStream(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetLogsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[3], "/cloud.TestKubeCloudAPI/GetLogsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIGetLogsStreamClient{stream}
	return x, nil
}

type TestKubeCloudAPI_GetLogsStreamClient interface {
	Send(*LogsStreamResponse) error
	Recv() (*LogsStreamRequest, error)
	grpc.ClientStream
}

type testKubeCloudAPIGetLogsStreamClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIGetLogsStreamClient) Send(m *LogsStreamResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetLogsStreamClient) Recv() (*LogsStreamRequest, error) {
	m := new(LogsStreamRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) GetTestWorkflowNotificationsStream(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetTestWorkflowNotificationsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[4], "/cloud.TestKubeCloudAPI/GetTestWorkflowNotificationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIGetTestWorkflowNotificationsStreamClient{stream}
	return x, nil
}

type TestKubeCloudAPI_GetTestWorkflowNotificationsStreamClient interface {
	Send(*TestWorkflowNotificationsResponse) error
	Recv() (*TestWorkflowNotificationsRequest, error)
	grpc.ClientStream
}

type testKubeCloudAPIGetTestWorkflowNotificationsStreamClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIGetTestWorkflowNotificationsStreamClient) Send(m *TestWorkflowNotificationsResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetTestWorkflowNotificationsStreamClient) Recv() (*TestWorkflowNotificationsRequest, error) {
	m := new(TestWorkflowNotificationsRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) GetTestWorkflowServiceNotificationsStream(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetTestWorkflowServiceNotificationsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[5], "/cloud.TestKubeCloudAPI/GetTestWorkflowServiceNotificationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIGetTestWorkflowServiceNotificationsStreamClient{stream}
	return x, nil
}

type TestKubeCloudAPI_GetTestWorkflowServiceNotificationsStreamClient interface {
	Send(*TestWorkflowServiceNotificationsResponse) error
	Recv() (*TestWorkflowServiceNotificationsRequest, error)
	grpc.ClientStream
}

type testKubeCloudAPIGetTestWorkflowServiceNotificationsStreamClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIGetTestWorkflowServiceNotificationsStreamClient) Send(m *TestWorkflowServiceNotificationsResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetTestWorkflowServiceNotificationsStreamClient) Recv() (*TestWorkflowServiceNotificationsRequest, error) {
	m := new(TestWorkflowServiceNotificationsRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) GetTestWorkflowParallelStepNotificationsStream(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetTestWorkflowParallelStepNotificationsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[6], "/cloud.TestKubeCloudAPI/GetTestWorkflowParallelStepNotificationsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIGetTestWorkflowParallelStepNotificationsStreamClient{stream}
	return x, nil
}

type TestKubeCloudAPI_GetTestWorkflowParallelStepNotificationsStreamClient interface {
	Send(*TestWorkflowParallelStepNotificationsResponse) error
	Recv() (*TestWorkflowParallelStepNotificationsRequest, error)
	grpc.ClientStream
}

type testKubeCloudAPIGetTestWorkflowParallelStepNotificationsStreamClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIGetTestWorkflowParallelStepNotificationsStreamClient) Send(m *TestWorkflowParallelStepNotificationsResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetTestWorkflowParallelStepNotificationsStreamClient) Recv() (*TestWorkflowParallelStepNotificationsRequest, error) {
	m := new(TestWorkflowParallelStepNotificationsRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) GetProContext(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProContextResponse, error) {
	out := new(ProContextResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/GetProContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) GetCredential(ctx context.Context, in *CredentialRequest, opts ...grpc.CallOption) (*CredentialResponse, error) {
	out := new(CredentialResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) GetEventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_GetEventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[7], "/cloud.TestKubeCloudAPI/GetEventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIGetEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestKubeCloudAPI_GetEventStreamClient interface {
	Recv() (*EventStreamData, error)
	grpc.ClientStream
}

type testKubeCloudAPIGetEventStreamClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIGetEventStreamClient) Recv() (*EventStreamData, error) {
	m := new(EventStreamData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) ScheduleExecution(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_ScheduleExecutionClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[8], "/cloud.TestKubeCloudAPI/ScheduleExecution", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIScheduleExecutionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestKubeCloudAPI_ScheduleExecutionClient interface {
	Recv() (*ScheduleResponse, error)
	grpc.ClientStream
}

type testKubeCloudAPIScheduleExecutionClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIScheduleExecutionClient) Recv() (*ScheduleResponse, error) {
	m := new(ScheduleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) GetUnfinishedExecutions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TestKubeCloudAPI_GetUnfinishedExecutionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[9], "/cloud.TestKubeCloudAPI/GetUnfinishedExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIGetUnfinishedExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestKubeCloudAPI_GetUnfinishedExecutionsClient interface {
	Recv() (*UnfinishedExecution, error)
	grpc.ClientStream
}

type testKubeCloudAPIGetUnfinishedExecutionsClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIGetUnfinishedExecutionsClient) Recv() (*UnfinishedExecution, error) {
	m := new(UnfinishedExecution)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) GetRunnerRequests(ctx context.Context, opts ...grpc.CallOption) (TestKubeCloudAPI_GetRunnerRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[10], "/cloud.TestKubeCloudAPI/GetRunnerRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIGetRunnerRequestsClient{stream}
	return x, nil
}

type TestKubeCloudAPI_GetRunnerRequestsClient interface {
	Send(*RunnerResponse) error
	Recv() (*RunnerRequest, error)
	grpc.ClientStream
}

type testKubeCloudAPIGetRunnerRequestsClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIGetRunnerRequestsClient) Send(m *RunnerResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetRunnerRequestsClient) Recv() (*RunnerRequest, error) {
	m := new(RunnerRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) InitExecution(ctx context.Context, in *InitExecutionRequest, opts ...grpc.CallOption) (*InitExecutionResponse, error) {
	out := new(InitExecutionResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/InitExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) GetExecution(ctx context.Context, in *GetExecutionRequest, opts ...grpc.CallOption) (*GetExecutionResponse, error) {
	out := new(GetExecutionResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/GetExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) UpdateExecutionResult(ctx context.Context, in *UpdateExecutionResultRequest, opts ...grpc.CallOption) (*UpdateExecutionResultResponse, error) {
	out := new(UpdateExecutionResultResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/UpdateExecutionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) UpdateExecutionOutput(ctx context.Context, in *UpdateExecutionOutputRequest, opts ...grpc.CallOption) (*UpdateExecutionOutputResponse, error) {
	out := new(UpdateExecutionOutputResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/UpdateExecutionOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) SaveExecutionLogsPresigned(ctx context.Context, in *SaveExecutionLogsPresignedRequest, opts ...grpc.CallOption) (*SaveExecutionLogsPresignedResponse, error) {
	out := new(SaveExecutionLogsPresignedResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/SaveExecutionLogsPresigned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) FinishExecution(ctx context.Context, in *FinishExecutionRequest, opts ...grpc.CallOption) (*FinishExecutionResponse, error) {
	out := new(FinishExecutionResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/FinishExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) SaveExecutionArtifactPresigned(ctx context.Context, in *SaveExecutionArtifactPresignedRequest, opts ...grpc.CallOption) (*SaveExecutionArtifactPresignedResponse, error) {
	out := new(SaveExecutionArtifactPresignedResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/SaveExecutionArtifactPresigned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) AppendExecutionReport(ctx context.Context, in *AppendExecutionReportRequest, opts ...grpc.CallOption) (*AppendExecutionReportResponse, error) {
	out := new(AppendExecutionReportResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/AppendExecutionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) GetTestWorkflow(ctx context.Context, in *GetTestWorkflowRequest, opts ...grpc.CallOption) (*GetTestWorkflowResponse, error) {
	out := new(GetTestWorkflowResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/GetTestWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) ListTestWorkflows(ctx context.Context, in *ListTestWorkflowsRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_ListTestWorkflowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[11], "/cloud.TestKubeCloudAPI/ListTestWorkflows", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIListTestWorkflowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestKubeCloudAPI_ListTestWorkflowsClient interface {
	Recv() (*TestWorkflowListItem, error)
	grpc.ClientStream
}

type testKubeCloudAPIListTestWorkflowsClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIListTestWorkflowsClient) Recv() (*TestWorkflowListItem, error) {
	m := new(TestWorkflowListItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) ListTestWorkflowLabels(ctx context.Context, in *ListTestWorkflowLabelsRequest, opts ...grpc.CallOption) (*ListTestWorkflowLabelsResponse, error) {
	out := new(ListTestWorkflowLabelsResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/ListTestWorkflowLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) CreateTestWorkflow(ctx context.Context, in *CreateTestWorkflowRequest, opts ...grpc.CallOption) (*CreateTestWorkflowResponse, error) {
	out := new(CreateTestWorkflowResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/CreateTestWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) UpdateTestWorkflow(ctx context.Context, in *UpdateTestWorkflowRequest, opts ...grpc.CallOption) (*UpdateTestWorkflowResponse, error) {
	out := new(UpdateTestWorkflowResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/UpdateTestWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) DeleteTestWorkflow(ctx context.Context, in *DeleteTestWorkflowRequest, opts ...grpc.CallOption) (*DeleteTestWorkflowResponse, error) {
	out := new(DeleteTestWorkflowResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/DeleteTestWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) DeleteTestWorkflowsByLabels(ctx context.Context, in *DeleteTestWorkflowsByLabelsRequest, opts ...grpc.CallOption) (*DeleteTestWorkflowsByLabelsResponse, error) {
	out := new(DeleteTestWorkflowsByLabelsResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/DeleteTestWorkflowsByLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) WatchTestWorkflowUpdates(ctx context.Context, in *WatchTestWorkflowUpdatesRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_WatchTestWorkflowUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[12], "/cloud.TestKubeCloudAPI/WatchTestWorkflowUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIWatchTestWorkflowUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestKubeCloudAPI_WatchTestWorkflowUpdatesClient interface {
	Recv() (*TestWorkflowUpdate, error)
	grpc.ClientStream
}

type testKubeCloudAPIWatchTestWorkflowUpdatesClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIWatchTestWorkflowUpdatesClient) Recv() (*TestWorkflowUpdate, error) {
	m := new(TestWorkflowUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) GetTestWorkflowTemplate(ctx context.Context, in *GetTestWorkflowTemplateRequest, opts ...grpc.CallOption) (*GetTestWorkflowTemplateResponse, error) {
	out := new(GetTestWorkflowTemplateResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/GetTestWorkflowTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) ListTestWorkflowTemplates(ctx context.Context, in *ListTestWorkflowTemplatesRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_ListTestWorkflowTemplatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[13], "/cloud.TestKubeCloudAPI/ListTestWorkflowTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIListTestWorkflowTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestKubeCloudAPI_ListTestWorkflowTemplatesClient interface {
	Recv() (*TestWorkflowTemplateListItem, error)
	grpc.ClientStream
}

type testKubeCloudAPIListTestWorkflowTemplatesClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIListTestWorkflowTemplatesClient) Recv() (*TestWorkflowTemplateListItem, error) {
	m := new(TestWorkflowTemplateListItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testKubeCloudAPIClient) ListTestWorkflowTemplateLabels(ctx context.Context, in *ListTestWorkflowTemplateLabelsRequest, opts ...grpc.CallOption) (*ListTestWorkflowTemplateLabelsResponse, error) {
	out := new(ListTestWorkflowTemplateLabelsResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/ListTestWorkflowTemplateLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) CreateTestWorkflowTemplate(ctx context.Context, in *CreateTestWorkflowTemplateRequest, opts ...grpc.CallOption) (*CreateTestWorkflowTemplateResponse, error) {
	out := new(CreateTestWorkflowTemplateResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/CreateTestWorkflowTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) UpdateTestWorkflowTemplate(ctx context.Context, in *UpdateTestWorkflowTemplateRequest, opts ...grpc.CallOption) (*UpdateTestWorkflowTemplateResponse, error) {
	out := new(UpdateTestWorkflowTemplateResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/UpdateTestWorkflowTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) DeleteTestWorkflowTemplate(ctx context.Context, in *DeleteTestWorkflowTemplateRequest, opts ...grpc.CallOption) (*DeleteTestWorkflowTemplateResponse, error) {
	out := new(DeleteTestWorkflowTemplateResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/DeleteTestWorkflowTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) DeleteTestWorkflowTemplatesByLabels(ctx context.Context, in *DeleteTestWorkflowTemplatesByLabelsRequest, opts ...grpc.CallOption) (*DeleteTestWorkflowTemplatesByLabelsResponse, error) {
	out := new(DeleteTestWorkflowTemplatesByLabelsResponse)
	err := c.cc.Invoke(ctx, "/cloud.TestKubeCloudAPI/DeleteTestWorkflowTemplatesByLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testKubeCloudAPIClient) WatchTestWorkflowTemplateUpdates(ctx context.Context, in *WatchTestWorkflowTemplateUpdatesRequest, opts ...grpc.CallOption) (TestKubeCloudAPI_WatchTestWorkflowTemplateUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestKubeCloudAPI_ServiceDesc.Streams[14], "/cloud.TestKubeCloudAPI/WatchTestWorkflowTemplateUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &testKubeCloudAPIWatchTestWorkflowTemplateUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestKubeCloudAPI_WatchTestWorkflowTemplateUpdatesClient interface {
	Recv() (*TestWorkflowTemplateUpdate, error)
	grpc.ClientStream
}

type testKubeCloudAPIWatchTestWorkflowTemplateUpdatesClient struct {
	grpc.ClientStream
}

func (x *testKubeCloudAPIWatchTestWorkflowTemplateUpdatesClient) Recv() (*TestWorkflowTemplateUpdate, error) {
	m := new(TestWorkflowTemplateUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestKubeCloudAPIServer is the server API for TestKubeCloudAPI service.
// All implementations must embed UnimplementedTestKubeCloudAPIServer
// for forward compatibility
type TestKubeCloudAPIServer interface {
	// Deprecated, use ExecuteAsync instead,
	// Will remove this after we fully migrate to ExecuteAsync.
	Execute(TestKubeCloudAPI_ExecuteServer) error
	Send(TestKubeCloudAPI_SendServer) error
	Call(context.Context, *CommandRequest) (*CommandResponse, error)
	ExecuteAsync(TestKubeCloudAPI_ExecuteAsyncServer) error
	GetLogsStream(TestKubeCloudAPI_GetLogsStreamServer) error
	GetTestWorkflowNotificationsStream(TestKubeCloudAPI_GetTestWorkflowNotificationsStreamServer) error
	GetTestWorkflowServiceNotificationsStream(TestKubeCloudAPI_GetTestWorkflowServiceNotificationsStreamServer) error
	GetTestWorkflowParallelStepNotificationsStream(TestKubeCloudAPI_GetTestWorkflowParallelStepNotificationsStreamServer) error
	GetProContext(context.Context, *emptypb.Empty) (*ProContextResponse, error)
	GetCredential(context.Context, *CredentialRequest) (*CredentialResponse, error)
	GetEventStream(*EventStreamRequest, TestKubeCloudAPI_GetEventStreamServer) error
	ScheduleExecution(*ScheduleRequest, TestKubeCloudAPI_ScheduleExecutionServer) error
	// Runner
	GetUnfinishedExecutions(*emptypb.Empty, TestKubeCloudAPI_GetUnfinishedExecutionsServer) error
	GetRunnerRequests(TestKubeCloudAPI_GetRunnerRequestsServer) error
	InitExecution(context.Context, *InitExecutionRequest) (*InitExecutionResponse, error)
	GetExecution(context.Context, *GetExecutionRequest) (*GetExecutionResponse, error)
	UpdateExecutionResult(context.Context, *UpdateExecutionResultRequest) (*UpdateExecutionResultResponse, error)
	UpdateExecutionOutput(context.Context, *UpdateExecutionOutputRequest) (*UpdateExecutionOutputResponse, error)
	SaveExecutionLogsPresigned(context.Context, *SaveExecutionLogsPresignedRequest) (*SaveExecutionLogsPresignedResponse, error)
	FinishExecution(context.Context, *FinishExecutionRequest) (*FinishExecutionResponse, error)
	// Execution
	SaveExecutionArtifactPresigned(context.Context, *SaveExecutionArtifactPresignedRequest) (*SaveExecutionArtifactPresignedResponse, error)
	AppendExecutionReport(context.Context, *AppendExecutionReportRequest) (*AppendExecutionReportResponse, error)
	// CRD Synchronisation
	// -- Test Workflows
	GetTestWorkflow(context.Context, *GetTestWorkflowRequest) (*GetTestWorkflowResponse, error)
	ListTestWorkflows(*ListTestWorkflowsRequest, TestKubeCloudAPI_ListTestWorkflowsServer) error
	ListTestWorkflowLabels(context.Context, *ListTestWorkflowLabelsRequest) (*ListTestWorkflowLabelsResponse, error)
	CreateTestWorkflow(context.Context, *CreateTestWorkflowRequest) (*CreateTestWorkflowResponse, error)
	UpdateTestWorkflow(context.Context, *UpdateTestWorkflowRequest) (*UpdateTestWorkflowResponse, error)
	DeleteTestWorkflow(context.Context, *DeleteTestWorkflowRequest) (*DeleteTestWorkflowResponse, error)
	DeleteTestWorkflowsByLabels(context.Context, *DeleteTestWorkflowsByLabelsRequest) (*DeleteTestWorkflowsByLabelsResponse, error)
	WatchTestWorkflowUpdates(*WatchTestWorkflowUpdatesRequest, TestKubeCloudAPI_WatchTestWorkflowUpdatesServer) error
	// -- Test Workflow Templates
	GetTestWorkflowTemplate(context.Context, *GetTestWorkflowTemplateRequest) (*GetTestWorkflowTemplateResponse, error)
	ListTestWorkflowTemplates(*ListTestWorkflowTemplatesRequest, TestKubeCloudAPI_ListTestWorkflowTemplatesServer) error
	ListTestWorkflowTemplateLabels(context.Context, *ListTestWorkflowTemplateLabelsRequest) (*ListTestWorkflowTemplateLabelsResponse, error)
	CreateTestWorkflowTemplate(context.Context, *CreateTestWorkflowTemplateRequest) (*CreateTestWorkflowTemplateResponse, error)
	UpdateTestWorkflowTemplate(context.Context, *UpdateTestWorkflowTemplateRequest) (*UpdateTestWorkflowTemplateResponse, error)
	DeleteTestWorkflowTemplate(context.Context, *DeleteTestWorkflowTemplateRequest) (*DeleteTestWorkflowTemplateResponse, error)
	DeleteTestWorkflowTemplatesByLabels(context.Context, *DeleteTestWorkflowTemplatesByLabelsRequest) (*DeleteTestWorkflowTemplatesByLabelsResponse, error)
	WatchTestWorkflowTemplateUpdates(*WatchTestWorkflowTemplateUpdatesRequest, TestKubeCloudAPI_WatchTestWorkflowTemplateUpdatesServer) error
	mustEmbedUnimplementedTestKubeCloudAPIServer()
}

// UnimplementedTestKubeCloudAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTestKubeCloudAPIServer struct {
}

func (UnimplementedTestKubeCloudAPIServer) Execute(TestKubeCloudAPI_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) Send(TestKubeCloudAPI_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) Call(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) ExecuteAsync(TestKubeCloudAPI_ExecuteAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteAsync not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetLogsStream(TestKubeCloudAPI_GetLogsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogsStream not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetTestWorkflowNotificationsStream(TestKubeCloudAPI_GetTestWorkflowNotificationsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTestWorkflowNotificationsStream not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetTestWorkflowServiceNotificationsStream(TestKubeCloudAPI_GetTestWorkflowServiceNotificationsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTestWorkflowServiceNotificationsStream not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetTestWorkflowParallelStepNotificationsStream(TestKubeCloudAPI_GetTestWorkflowParallelStepNotificationsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTestWorkflowParallelStepNotificationsStream not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetProContext(context.Context, *emptypb.Empty) (*ProContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProContext not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetCredential(context.Context, *CredentialRequest) (*CredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetEventStream(*EventStreamRequest, TestKubeCloudAPI_GetEventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventStream not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) ScheduleExecution(*ScheduleRequest, TestKubeCloudAPI_ScheduleExecutionServer) error {
	return status.Errorf(codes.Unimplemented, "method ScheduleExecution not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetUnfinishedExecutions(*emptypb.Empty, TestKubeCloudAPI_GetUnfinishedExecutionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUnfinishedExecutions not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetRunnerRequests(TestKubeCloudAPI_GetRunnerRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRunnerRequests not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) InitExecution(context.Context, *InitExecutionRequest) (*InitExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitExecution not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetExecution(context.Context, *GetExecutionRequest) (*GetExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecution not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) UpdateExecutionResult(context.Context, *UpdateExecutionResultRequest) (*UpdateExecutionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExecutionResult not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) UpdateExecutionOutput(context.Context, *UpdateExecutionOutputRequest) (*UpdateExecutionOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExecutionOutput not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) SaveExecutionLogsPresigned(context.Context, *SaveExecutionLogsPresignedRequest) (*SaveExecutionLogsPresignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveExecutionLogsPresigned not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) FinishExecution(context.Context, *FinishExecutionRequest) (*FinishExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishExecution not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) SaveExecutionArtifactPresigned(context.Context, *SaveExecutionArtifactPresignedRequest) (*SaveExecutionArtifactPresignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveExecutionArtifactPresigned not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) AppendExecutionReport(context.Context, *AppendExecutionReportRequest) (*AppendExecutionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendExecutionReport not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetTestWorkflow(context.Context, *GetTestWorkflowRequest) (*GetTestWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestWorkflow not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) ListTestWorkflows(*ListTestWorkflowsRequest, TestKubeCloudAPI_ListTestWorkflowsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTestWorkflows not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) ListTestWorkflowLabels(context.Context, *ListTestWorkflowLabelsRequest) (*ListTestWorkflowLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestWorkflowLabels not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) CreateTestWorkflow(context.Context, *CreateTestWorkflowRequest) (*CreateTestWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestWorkflow not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) UpdateTestWorkflow(context.Context, *UpdateTestWorkflowRequest) (*UpdateTestWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestWorkflow not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) DeleteTestWorkflow(context.Context, *DeleteTestWorkflowRequest) (*DeleteTestWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestWorkflow not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) DeleteTestWorkflowsByLabels(context.Context, *DeleteTestWorkflowsByLabelsRequest) (*DeleteTestWorkflowsByLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestWorkflowsByLabels not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) WatchTestWorkflowUpdates(*WatchTestWorkflowUpdatesRequest, TestKubeCloudAPI_WatchTestWorkflowUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTestWorkflowUpdates not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) GetTestWorkflowTemplate(context.Context, *GetTestWorkflowTemplateRequest) (*GetTestWorkflowTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestWorkflowTemplate not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) ListTestWorkflowTemplates(*ListTestWorkflowTemplatesRequest, TestKubeCloudAPI_ListTestWorkflowTemplatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTestWorkflowTemplates not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) ListTestWorkflowTemplateLabels(context.Context, *ListTestWorkflowTemplateLabelsRequest) (*ListTestWorkflowTemplateLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestWorkflowTemplateLabels not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) CreateTestWorkflowTemplate(context.Context, *CreateTestWorkflowTemplateRequest) (*CreateTestWorkflowTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestWorkflowTemplate not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) UpdateTestWorkflowTemplate(context.Context, *UpdateTestWorkflowTemplateRequest) (*UpdateTestWorkflowTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestWorkflowTemplate not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) DeleteTestWorkflowTemplate(context.Context, *DeleteTestWorkflowTemplateRequest) (*DeleteTestWorkflowTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestWorkflowTemplate not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) DeleteTestWorkflowTemplatesByLabels(context.Context, *DeleteTestWorkflowTemplatesByLabelsRequest) (*DeleteTestWorkflowTemplatesByLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestWorkflowTemplatesByLabels not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) WatchTestWorkflowTemplateUpdates(*WatchTestWorkflowTemplateUpdatesRequest, TestKubeCloudAPI_WatchTestWorkflowTemplateUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTestWorkflowTemplateUpdates not implemented")
}
func (UnimplementedTestKubeCloudAPIServer) mustEmbedUnimplementedTestKubeCloudAPIServer() {}

// UnsafeTestKubeCloudAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestKubeCloudAPIServer will
// result in compilation errors.
type UnsafeTestKubeCloudAPIServer interface {
	mustEmbedUnimplementedTestKubeCloudAPIServer()
}

func RegisterTestKubeCloudAPIServer(s grpc.ServiceRegistrar, srv TestKubeCloudAPIServer) {
	s.RegisterService(&TestKubeCloudAPI_ServiceDesc, srv)
}

func _TestKubeCloudAPI_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestKubeCloudAPIServer).Execute(&testKubeCloudAPIExecuteServer{stream})
}

type TestKubeCloudAPI_ExecuteServer interface {
	Send(*ExecuteRequest) error
	Recv() (*ExecuteResponse, error)
	grpc.ServerStream
}

type testKubeCloudAPIExecuteServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIExecuteServer) Send(m *ExecuteRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testKubeCloudAPIExecuteServer) Recv() (*ExecuteResponse, error) {
	m := new(ExecuteResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestKubeCloudAPI_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestKubeCloudAPIServer).Send(&testKubeCloudAPISendServer{stream})
}

type TestKubeCloudAPI_SendServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*WebsocketData, error)
	grpc.ServerStream
}

type testKubeCloudAPISendServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPISendServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testKubeCloudAPISendServer) Recv() (*WebsocketData, error) {
	m := new(WebsocketData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestKubeCloudAPI_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).Call(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_ExecuteAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestKubeCloudAPIServer).ExecuteAsync(&testKubeCloudAPIExecuteAsyncServer{stream})
}

type TestKubeCloudAPI_ExecuteAsyncServer interface {
	Send(*ExecuteRequest) error
	Recv() (*ExecuteResponse, error)
	grpc.ServerStream
}

type testKubeCloudAPIExecuteAsyncServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIExecuteAsyncServer) Send(m *ExecuteRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testKubeCloudAPIExecuteAsyncServer) Recv() (*ExecuteResponse, error) {
	m := new(ExecuteResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestKubeCloudAPI_GetLogsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestKubeCloudAPIServer).GetLogsStream(&testKubeCloudAPIGetLogsStreamServer{stream})
}

type TestKubeCloudAPI_GetLogsStreamServer interface {
	Send(*LogsStreamRequest) error
	Recv() (*LogsStreamResponse, error)
	grpc.ServerStream
}

type testKubeCloudAPIGetLogsStreamServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIGetLogsStreamServer) Send(m *LogsStreamRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetLogsStreamServer) Recv() (*LogsStreamResponse, error) {
	m := new(LogsStreamResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestKubeCloudAPI_GetTestWorkflowNotificationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestKubeCloudAPIServer).GetTestWorkflowNotificationsStream(&testKubeCloudAPIGetTestWorkflowNotificationsStreamServer{stream})
}

type TestKubeCloudAPI_GetTestWorkflowNotificationsStreamServer interface {
	Send(*TestWorkflowNotificationsRequest) error
	Recv() (*TestWorkflowNotificationsResponse, error)
	grpc.ServerStream
}

type testKubeCloudAPIGetTestWorkflowNotificationsStreamServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIGetTestWorkflowNotificationsStreamServer) Send(m *TestWorkflowNotificationsRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetTestWorkflowNotificationsStreamServer) Recv() (*TestWorkflowNotificationsResponse, error) {
	m := new(TestWorkflowNotificationsResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestKubeCloudAPI_GetTestWorkflowServiceNotificationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestKubeCloudAPIServer).GetTestWorkflowServiceNotificationsStream(&testKubeCloudAPIGetTestWorkflowServiceNotificationsStreamServer{stream})
}

type TestKubeCloudAPI_GetTestWorkflowServiceNotificationsStreamServer interface {
	Send(*TestWorkflowServiceNotificationsRequest) error
	Recv() (*TestWorkflowServiceNotificationsResponse, error)
	grpc.ServerStream
}

type testKubeCloudAPIGetTestWorkflowServiceNotificationsStreamServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIGetTestWorkflowServiceNotificationsStreamServer) Send(m *TestWorkflowServiceNotificationsRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetTestWorkflowServiceNotificationsStreamServer) Recv() (*TestWorkflowServiceNotificationsResponse, error) {
	m := new(TestWorkflowServiceNotificationsResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestKubeCloudAPI_GetTestWorkflowParallelStepNotificationsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestKubeCloudAPIServer).GetTestWorkflowParallelStepNotificationsStream(&testKubeCloudAPIGetTestWorkflowParallelStepNotificationsStreamServer{stream})
}

type TestKubeCloudAPI_GetTestWorkflowParallelStepNotificationsStreamServer interface {
	Send(*TestWorkflowParallelStepNotificationsRequest) error
	Recv() (*TestWorkflowParallelStepNotificationsResponse, error)
	grpc.ServerStream
}

type testKubeCloudAPIGetTestWorkflowParallelStepNotificationsStreamServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIGetTestWorkflowParallelStepNotificationsStreamServer) Send(m *TestWorkflowParallelStepNotificationsRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetTestWorkflowParallelStepNotificationsStreamServer) Recv() (*TestWorkflowParallelStepNotificationsResponse, error) {
	m := new(TestWorkflowParallelStepNotificationsResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestKubeCloudAPI_GetProContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).GetProContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/GetProContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).GetProContext(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).GetCredential(ctx, req.(*CredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_GetEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestKubeCloudAPIServer).GetEventStream(m, &testKubeCloudAPIGetEventStreamServer{stream})
}

type TestKubeCloudAPI_GetEventStreamServer interface {
	Send(*EventStreamData) error
	grpc.ServerStream
}

type testKubeCloudAPIGetEventStreamServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIGetEventStreamServer) Send(m *EventStreamData) error {
	return x.ServerStream.SendMsg(m)
}

func _TestKubeCloudAPI_ScheduleExecution_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScheduleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestKubeCloudAPIServer).ScheduleExecution(m, &testKubeCloudAPIScheduleExecutionServer{stream})
}

type TestKubeCloudAPI_ScheduleExecutionServer interface {
	Send(*ScheduleResponse) error
	grpc.ServerStream
}

type testKubeCloudAPIScheduleExecutionServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIScheduleExecutionServer) Send(m *ScheduleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestKubeCloudAPI_GetUnfinishedExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestKubeCloudAPIServer).GetUnfinishedExecutions(m, &testKubeCloudAPIGetUnfinishedExecutionsServer{stream})
}

type TestKubeCloudAPI_GetUnfinishedExecutionsServer interface {
	Send(*UnfinishedExecution) error
	grpc.ServerStream
}

type testKubeCloudAPIGetUnfinishedExecutionsServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIGetUnfinishedExecutionsServer) Send(m *UnfinishedExecution) error {
	return x.ServerStream.SendMsg(m)
}

func _TestKubeCloudAPI_GetRunnerRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestKubeCloudAPIServer).GetRunnerRequests(&testKubeCloudAPIGetRunnerRequestsServer{stream})
}

type TestKubeCloudAPI_GetRunnerRequestsServer interface {
	Send(*RunnerRequest) error
	Recv() (*RunnerResponse, error)
	grpc.ServerStream
}

type testKubeCloudAPIGetRunnerRequestsServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIGetRunnerRequestsServer) Send(m *RunnerRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testKubeCloudAPIGetRunnerRequestsServer) Recv() (*RunnerResponse, error) {
	m := new(RunnerResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestKubeCloudAPI_InitExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).InitExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/InitExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).InitExecution(ctx, req.(*InitExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_GetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).GetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/GetExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).GetExecution(ctx, req.(*GetExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_UpdateExecutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExecutionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).UpdateExecutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/UpdateExecutionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).UpdateExecutionResult(ctx, req.(*UpdateExecutionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_UpdateExecutionOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExecutionOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).UpdateExecutionOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/UpdateExecutionOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).UpdateExecutionOutput(ctx, req.(*UpdateExecutionOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_SaveExecutionLogsPresigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveExecutionLogsPresignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).SaveExecutionLogsPresigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/SaveExecutionLogsPresigned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).SaveExecutionLogsPresigned(ctx, req.(*SaveExecutionLogsPresignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_FinishExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).FinishExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/FinishExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).FinishExecution(ctx, req.(*FinishExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_SaveExecutionArtifactPresigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveExecutionArtifactPresignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).SaveExecutionArtifactPresigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/SaveExecutionArtifactPresigned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).SaveExecutionArtifactPresigned(ctx, req.(*SaveExecutionArtifactPresignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_AppendExecutionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendExecutionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).AppendExecutionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/AppendExecutionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).AppendExecutionReport(ctx, req.(*AppendExecutionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_GetTestWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).GetTestWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/GetTestWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).GetTestWorkflow(ctx, req.(*GetTestWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_ListTestWorkflows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTestWorkflowsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestKubeCloudAPIServer).ListTestWorkflows(m, &testKubeCloudAPIListTestWorkflowsServer{stream})
}

type TestKubeCloudAPI_ListTestWorkflowsServer interface {
	Send(*TestWorkflowListItem) error
	grpc.ServerStream
}

type testKubeCloudAPIListTestWorkflowsServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIListTestWorkflowsServer) Send(m *TestWorkflowListItem) error {
	return x.ServerStream.SendMsg(m)
}

func _TestKubeCloudAPI_ListTestWorkflowLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestWorkflowLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).ListTestWorkflowLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/ListTestWorkflowLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).ListTestWorkflowLabels(ctx, req.(*ListTestWorkflowLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_CreateTestWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).CreateTestWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/CreateTestWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).CreateTestWorkflow(ctx, req.(*CreateTestWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_UpdateTestWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).UpdateTestWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/UpdateTestWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).UpdateTestWorkflow(ctx, req.(*UpdateTestWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_DeleteTestWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).DeleteTestWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/DeleteTestWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).DeleteTestWorkflow(ctx, req.(*DeleteTestWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_DeleteTestWorkflowsByLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestWorkflowsByLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).DeleteTestWorkflowsByLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/DeleteTestWorkflowsByLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).DeleteTestWorkflowsByLabels(ctx, req.(*DeleteTestWorkflowsByLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_WatchTestWorkflowUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTestWorkflowUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestKubeCloudAPIServer).WatchTestWorkflowUpdates(m, &testKubeCloudAPIWatchTestWorkflowUpdatesServer{stream})
}

type TestKubeCloudAPI_WatchTestWorkflowUpdatesServer interface {
	Send(*TestWorkflowUpdate) error
	grpc.ServerStream
}

type testKubeCloudAPIWatchTestWorkflowUpdatesServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIWatchTestWorkflowUpdatesServer) Send(m *TestWorkflowUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _TestKubeCloudAPI_GetTestWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).GetTestWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/GetTestWorkflowTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).GetTestWorkflowTemplate(ctx, req.(*GetTestWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_ListTestWorkflowTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTestWorkflowTemplatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestKubeCloudAPIServer).ListTestWorkflowTemplates(m, &testKubeCloudAPIListTestWorkflowTemplatesServer{stream})
}

type TestKubeCloudAPI_ListTestWorkflowTemplatesServer interface {
	Send(*TestWorkflowTemplateListItem) error
	grpc.ServerStream
}

type testKubeCloudAPIListTestWorkflowTemplatesServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIListTestWorkflowTemplatesServer) Send(m *TestWorkflowTemplateListItem) error {
	return x.ServerStream.SendMsg(m)
}

func _TestKubeCloudAPI_ListTestWorkflowTemplateLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestWorkflowTemplateLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).ListTestWorkflowTemplateLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/ListTestWorkflowTemplateLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).ListTestWorkflowTemplateLabels(ctx, req.(*ListTestWorkflowTemplateLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_CreateTestWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).CreateTestWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/CreateTestWorkflowTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).CreateTestWorkflowTemplate(ctx, req.(*CreateTestWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_UpdateTestWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).UpdateTestWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/UpdateTestWorkflowTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).UpdateTestWorkflowTemplate(ctx, req.(*UpdateTestWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_DeleteTestWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).DeleteTestWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/DeleteTestWorkflowTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).DeleteTestWorkflowTemplate(ctx, req.(*DeleteTestWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_DeleteTestWorkflowTemplatesByLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestWorkflowTemplatesByLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestKubeCloudAPIServer).DeleteTestWorkflowTemplatesByLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.TestKubeCloudAPI/DeleteTestWorkflowTemplatesByLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestKubeCloudAPIServer).DeleteTestWorkflowTemplatesByLabels(ctx, req.(*DeleteTestWorkflowTemplatesByLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestKubeCloudAPI_WatchTestWorkflowTemplateUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTestWorkflowTemplateUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestKubeCloudAPIServer).WatchTestWorkflowTemplateUpdates(m, &testKubeCloudAPIWatchTestWorkflowTemplateUpdatesServer{stream})
}

type TestKubeCloudAPI_WatchTestWorkflowTemplateUpdatesServer interface {
	Send(*TestWorkflowTemplateUpdate) error
	grpc.ServerStream
}

type testKubeCloudAPIWatchTestWorkflowTemplateUpdatesServer struct {
	grpc.ServerStream
}

func (x *testKubeCloudAPIWatchTestWorkflowTemplateUpdatesServer) Send(m *TestWorkflowTemplateUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// TestKubeCloudAPI_ServiceDesc is the grpc.ServiceDesc for TestKubeCloudAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestKubeCloudAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.TestKubeCloudAPI",
	HandlerType: (*TestKubeCloudAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _TestKubeCloudAPI_Call_Handler,
		},
		{
			MethodName: "GetProContext",
			Handler:    _TestKubeCloudAPI_GetProContext_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _TestKubeCloudAPI_GetCredential_Handler,
		},
		{
			MethodName: "InitExecution",
			Handler:    _TestKubeCloudAPI_InitExecution_Handler,
		},
		{
			MethodName: "GetExecution",
			Handler:    _TestKubeCloudAPI_GetExecution_Handler,
		},
		{
			MethodName: "UpdateExecutionResult",
			Handler:    _TestKubeCloudAPI_UpdateExecutionResult_Handler,
		},
		{
			MethodName: "UpdateExecutionOutput",
			Handler:    _TestKubeCloudAPI_UpdateExecutionOutput_Handler,
		},
		{
			MethodName: "SaveExecutionLogsPresigned",
			Handler:    _TestKubeCloudAPI_SaveExecutionLogsPresigned_Handler,
		},
		{
			MethodName: "FinishExecution",
			Handler:    _TestKubeCloudAPI_FinishExecution_Handler,
		},
		{
			MethodName: "SaveExecutionArtifactPresigned",
			Handler:    _TestKubeCloudAPI_SaveExecutionArtifactPresigned_Handler,
		},
		{
			MethodName: "AppendExecutionReport",
			Handler:    _TestKubeCloudAPI_AppendExecutionReport_Handler,
		},
		{
			MethodName: "GetTestWorkflow",
			Handler:    _TestKubeCloudAPI_GetTestWorkflow_Handler,
		},
		{
			MethodName: "ListTestWorkflowLabels",
			Handler:    _TestKubeCloudAPI_ListTestWorkflowLabels_Handler,
		},
		{
			MethodName: "CreateTestWorkflow",
			Handler:    _TestKubeCloudAPI_CreateTestWorkflow_Handler,
		},
		{
			MethodName: "UpdateTestWorkflow",
			Handler:    _TestKubeCloudAPI_UpdateTestWorkflow_Handler,
		},
		{
			MethodName: "DeleteTestWorkflow",
			Handler:    _TestKubeCloudAPI_DeleteTestWorkflow_Handler,
		},
		{
			MethodName: "DeleteTestWorkflowsByLabels",
			Handler:    _TestKubeCloudAPI_DeleteTestWorkflowsByLabels_Handler,
		},
		{
			MethodName: "GetTestWorkflowTemplate",
			Handler:    _TestKubeCloudAPI_GetTestWorkflowTemplate_Handler,
		},
		{
			MethodName: "ListTestWorkflowTemplateLabels",
			Handler:    _TestKubeCloudAPI_ListTestWorkflowTemplateLabels_Handler,
		},
		{
			MethodName: "CreateTestWorkflowTemplate",
			Handler:    _TestKubeCloudAPI_CreateTestWorkflowTemplate_Handler,
		},
		{
			MethodName: "UpdateTestWorkflowTemplate",
			Handler:    _TestKubeCloudAPI_UpdateTestWorkflowTemplate_Handler,
		},
		{
			MethodName: "DeleteTestWorkflowTemplate",
			Handler:    _TestKubeCloudAPI_DeleteTestWorkflowTemplate_Handler,
		},
		{
			MethodName: "DeleteTestWorkflowTemplatesByLabels",
			Handler:    _TestKubeCloudAPI_DeleteTestWorkflowTemplatesByLabels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _TestKubeCloudAPI_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Send",
			Handler:       _TestKubeCloudAPI_Send_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecuteAsync",
			Handler:       _TestKubeCloudAPI_ExecuteAsync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLogsStream",
			Handler:       _TestKubeCloudAPI_GetLogsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTestWorkflowNotificationsStream",
			Handler:       _TestKubeCloudAPI_GetTestWorkflowNotificationsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTestWorkflowServiceNotificationsStream",
			Handler:       _TestKubeCloudAPI_GetTestWorkflowServiceNotificationsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTestWorkflowParallelStepNotificationsStream",
			Handler:       _TestKubeCloudAPI_GetTestWorkflowParallelStepNotificationsStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetEventStream",
			Handler:       _TestKubeCloudAPI_GetEventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ScheduleExecution",
			Handler:       _TestKubeCloudAPI_ScheduleExecution_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUnfinishedExecutions",
			Handler:       _TestKubeCloudAPI_GetUnfinishedExecutions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRunnerRequests",
			Handler:       _TestKubeCloudAPI_GetRunnerRequests_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListTestWorkflows",
			Handler:       _TestKubeCloudAPI_ListTestWorkflows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchTestWorkflowUpdates",
			Handler:       _TestKubeCloudAPI_WatchTestWorkflowUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTestWorkflowTemplates",
			Handler:       _TestKubeCloudAPI_ListTestWorkflowTemplates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchTestWorkflowTemplateUpdates",
			Handler:       _TestKubeCloudAPI_WatchTestWorkflowTemplateUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
