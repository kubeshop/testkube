// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/newclients/testworkflowtemplateclient (interfaces: TestWorkflowTemplateClient)
//
// Generated by this command:
//
//	mockgen -destination=./mock_interface.go -package=testworkflowtemplateclient github.com/kubeshop/testkube/pkg/newclients/testworkflowtemplateclient TestWorkflowTemplateClient
//

// Package testworkflowtemplateclient is a generated GoMock package.
package testworkflowtemplateclient

import (
	context "context"
	reflect "reflect"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	gomock "go.uber.org/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
)

// MockTestWorkflowTemplateClient is a mock of TestWorkflowTemplateClient interface.
type MockTestWorkflowTemplateClient struct {
	ctrl     *gomock.Controller
	recorder *MockTestWorkflowTemplateClientMockRecorder
	isgomock struct{}
}

// MockTestWorkflowTemplateClientMockRecorder is the mock recorder for MockTestWorkflowTemplateClient.
type MockTestWorkflowTemplateClientMockRecorder struct {
	mock *MockTestWorkflowTemplateClient
}

// NewMockTestWorkflowTemplateClient creates a new mock instance.
func NewMockTestWorkflowTemplateClient(ctrl *gomock.Controller) *MockTestWorkflowTemplateClient {
	mock := &MockTestWorkflowTemplateClient{ctrl: ctrl}
	mock.recorder = &MockTestWorkflowTemplateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestWorkflowTemplateClient) EXPECT() *MockTestWorkflowTemplateClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestWorkflowTemplateClient) Create(ctx context.Context, environmentId string, template testkube.TestWorkflowTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, environmentId, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTestWorkflowTemplateClientMockRecorder) Create(ctx, environmentId, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).Create), ctx, environmentId, template)
}

// Delete mocks base method.
func (m *MockTestWorkflowTemplateClient) Delete(ctx context.Context, environmentId, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, environmentId, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTestWorkflowTemplateClientMockRecorder) Delete(ctx, environmentId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).Delete), ctx, environmentId, name)
}

// DeleteByLabels mocks base method.
func (m *MockTestWorkflowTemplateClient) DeleteByLabels(ctx context.Context, environmentId string, labels map[string]string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByLabels", ctx, environmentId, labels)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByLabels indicates an expected call of DeleteByLabels.
func (mr *MockTestWorkflowTemplateClientMockRecorder) DeleteByLabels(ctx, environmentId, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByLabels", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).DeleteByLabels), ctx, environmentId, labels)
}

// Get mocks base method.
func (m *MockTestWorkflowTemplateClient) Get(ctx context.Context, environmentId, name string) (*testkube.TestWorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, environmentId, name)
	ret0, _ := ret[0].(*testkube.TestWorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTestWorkflowTemplateClientMockRecorder) Get(ctx, environmentId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).Get), ctx, environmentId, name)
}

// GetKubernetesObjectUID mocks base method.
func (m *MockTestWorkflowTemplateClient) GetKubernetesObjectUID(ctx context.Context, environmentId, name string) (types.UID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesObjectUID", ctx, environmentId, name)
	ret0, _ := ret[0].(types.UID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesObjectUID indicates an expected call of GetKubernetesObjectUID.
func (mr *MockTestWorkflowTemplateClientMockRecorder) GetKubernetesObjectUID(ctx, environmentId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesObjectUID", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).GetKubernetesObjectUID), ctx, environmentId, name)
}

// List mocks base method.
func (m *MockTestWorkflowTemplateClient) List(ctx context.Context, environmentId string, options ListOptions) ([]testkube.TestWorkflowTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, environmentId, options)
	ret0, _ := ret[0].([]testkube.TestWorkflowTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTestWorkflowTemplateClientMockRecorder) List(ctx, environmentId, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).List), ctx, environmentId, options)
}

// ListLabels mocks base method.
func (m *MockTestWorkflowTemplateClient) ListLabels(ctx context.Context, environmentId string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabels", ctx, environmentId)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabels indicates an expected call of ListLabels.
func (mr *MockTestWorkflowTemplateClientMockRecorder) ListLabels(ctx, environmentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabels", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).ListLabels), ctx, environmentId)
}

// Update mocks base method.
func (m *MockTestWorkflowTemplateClient) Update(ctx context.Context, environmentId string, template testkube.TestWorkflowTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, environmentId, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTestWorkflowTemplateClientMockRecorder) Update(ctx, environmentId, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).Update), ctx, environmentId, template)
}

// WatchUpdates mocks base method.
func (m *MockTestWorkflowTemplateClient) WatchUpdates(ctx context.Context, environmentId string, includeInitialData bool) Watcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUpdates", ctx, environmentId, includeInitialData)
	ret0, _ := ret[0].(Watcher)
	return ret0
}

// WatchUpdates indicates an expected call of WatchUpdates.
func (mr *MockTestWorkflowTemplateClientMockRecorder) WatchUpdates(ctx, environmentId, includeInitialData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUpdates", reflect.TypeOf((*MockTestWorkflowTemplateClient)(nil).WatchUpdates), ctx, environmentId, includeInitialData)
}
