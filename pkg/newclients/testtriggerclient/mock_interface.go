// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/newclients/testtriggerclient (interfaces: TestTriggerClient)
//
// Generated by this command:
//
//	mockgen -destination=./mock_interface.go -package=testtriggerclient github.com/kubeshop/testkube/pkg/newclients/testtriggerclient TestTriggerClient
//

// Package testtriggerclient is a generated GoMock package.
package testtriggerclient

import (
	context "context"
	reflect "reflect"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	gomock "go.uber.org/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
)

// MockTestTriggerClient is a mock of TestTriggerClient interface.
type MockTestTriggerClient struct {
	ctrl     *gomock.Controller
	recorder *MockTestTriggerClientMockRecorder
	isgomock struct{}
}

// MockTestTriggerClientMockRecorder is the mock recorder for MockTestTriggerClient.
type MockTestTriggerClientMockRecorder struct {
	mock *MockTestTriggerClient
}

// NewMockTestTriggerClient creates a new mock instance.
func NewMockTestTriggerClient(ctrl *gomock.Controller) *MockTestTriggerClient {
	mock := &MockTestTriggerClient{ctrl: ctrl}
	mock.recorder = &MockTestTriggerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestTriggerClient) EXPECT() *MockTestTriggerClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestTriggerClient) Create(ctx context.Context, environmentId string, trigger testkube.TestTrigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, environmentId, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTestTriggerClientMockRecorder) Create(ctx, environmentId, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestTriggerClient)(nil).Create), ctx, environmentId, trigger)
}

// Delete mocks base method.
func (m *MockTestTriggerClient) Delete(ctx context.Context, environmentId, name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, environmentId, name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTestTriggerClientMockRecorder) Delete(ctx, environmentId, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTestTriggerClient)(nil).Delete), ctx, environmentId, name, namespace)
}

// DeleteAll mocks base method.
func (m *MockTestTriggerClient) DeleteAll(ctx context.Context, environmentId, namespace string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, environmentId, namespace)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockTestTriggerClientMockRecorder) DeleteAll(ctx, environmentId, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockTestTriggerClient)(nil).DeleteAll), ctx, environmentId, namespace)
}

// DeleteByLabels mocks base method.
func (m *MockTestTriggerClient) DeleteByLabels(ctx context.Context, environmentId, selector, namespace string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByLabels", ctx, environmentId, selector, namespace)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByLabels indicates an expected call of DeleteByLabels.
func (mr *MockTestTriggerClientMockRecorder) DeleteByLabels(ctx, environmentId, selector, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByLabels", reflect.TypeOf((*MockTestTriggerClient)(nil).DeleteByLabels), ctx, environmentId, selector, namespace)
}

// Get mocks base method.
func (m *MockTestTriggerClient) Get(ctx context.Context, environmentId, name, namespace string) (*testkube.TestTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, environmentId, name, namespace)
	ret0, _ := ret[0].(*testkube.TestTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTestTriggerClientMockRecorder) Get(ctx, environmentId, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTestTriggerClient)(nil).Get), ctx, environmentId, name, namespace)
}

// GetKubernetesObjectUID mocks base method.
func (m *MockTestTriggerClient) GetKubernetesObjectUID(ctx context.Context, environmentId, name, namespace string) (types.UID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesObjectUID", ctx, environmentId, name, namespace)
	ret0, _ := ret[0].(types.UID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesObjectUID indicates an expected call of GetKubernetesObjectUID.
func (mr *MockTestTriggerClientMockRecorder) GetKubernetesObjectUID(ctx, environmentId, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesObjectUID", reflect.TypeOf((*MockTestTriggerClient)(nil).GetKubernetesObjectUID), ctx, environmentId, name, namespace)
}

// List mocks base method.
func (m *MockTestTriggerClient) List(ctx context.Context, environmentId string, options ListOptions, namespace string) ([]testkube.TestTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, environmentId, options, namespace)
	ret0, _ := ret[0].([]testkube.TestTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTestTriggerClientMockRecorder) List(ctx, environmentId, options, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTestTriggerClient)(nil).List), ctx, environmentId, options, namespace)
}

// ListLabels mocks base method.
func (m *MockTestTriggerClient) ListLabels(ctx context.Context, environmentId, namespace string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabels", ctx, environmentId, namespace)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabels indicates an expected call of ListLabels.
func (mr *MockTestTriggerClientMockRecorder) ListLabels(ctx, environmentId, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabels", reflect.TypeOf((*MockTestTriggerClient)(nil).ListLabels), ctx, environmentId, namespace)
}

// Update mocks base method.
func (m *MockTestTriggerClient) Update(ctx context.Context, environmentId string, trigger testkube.TestTrigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, environmentId, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTestTriggerClientMockRecorder) Update(ctx, environmentId, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestTriggerClient)(nil).Update), ctx, environmentId, trigger)
}
