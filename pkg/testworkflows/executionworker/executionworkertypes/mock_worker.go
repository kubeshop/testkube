// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/testworkflows/executionworker/executionworkertypes (interfaces: Worker)

// Package executionworkertypes is a generated GoMock package.
package executionworkertypes

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/kubeshop/testkube/pkg/testworkflows/executionworker/utils"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockWorker) Abort(arg0 context.Context, arg1 string, arg2 DestroyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockWorkerMockRecorder) Abort(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockWorker)(nil).Abort), arg0, arg1, arg2)
}

// Destroy mocks base method.
func (m *MockWorker) Destroy(arg0 context.Context, arg1 string, arg2 DestroyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockWorkerMockRecorder) Destroy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockWorker)(nil).Destroy), arg0, arg1, arg2)
}

// DestroyGroup mocks base method.
func (m *MockWorker) DestroyGroup(arg0 context.Context, arg1 string, arg2 DestroyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyGroup indicates an expected call of DestroyGroup.
func (mr *MockWorkerMockRecorder) DestroyGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyGroup", reflect.TypeOf((*MockWorker)(nil).DestroyGroup), arg0, arg1, arg2)
}

// Execute mocks base method.
func (m *MockWorker) Execute(arg0 context.Context, arg1 ExecuteRequest) (*ExecuteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*ExecuteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockWorkerMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockWorker)(nil).Execute), arg0, arg1)
}

// Finished mocks base method.
func (m *MockWorker) Finished(arg0 context.Context, arg1 string, arg2 GetOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finished indicates an expected call of Finished.
func (mr *MockWorkerMockRecorder) Finished(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockWorker)(nil).Finished), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockWorker) Get(arg0 context.Context, arg1 string, arg2 GetOptions) (*GetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*GetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWorkerMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorker)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockWorker) List(arg0 context.Context, arg1 ListOptions) ([]ListResultItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]ListResultItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWorkerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWorker)(nil).List), arg0, arg1)
}

// Logs mocks base method.
func (m *MockWorker) Logs(arg0 context.Context, arg1 string, arg2 LogsOptions) utils.LogsReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0, arg1, arg2)
	ret0, _ := ret[0].(utils.LogsReader)
	return ret0
}

// Logs indicates an expected call of Logs.
func (mr *MockWorkerMockRecorder) Logs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockWorker)(nil).Logs), arg0, arg1, arg2)
}

// Notifications mocks base method.
func (m *MockWorker) Notifications(arg0 context.Context, arg1 string, arg2 NotificationsOptions) NotificationsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications", arg0, arg1, arg2)
	ret0, _ := ret[0].(NotificationsWatcher)
	return ret0
}

// Notifications indicates an expected call of Notifications.
func (mr *MockWorkerMockRecorder) Notifications(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockWorker)(nil).Notifications), arg0, arg1, arg2)
}

// Pause mocks base method.
func (m *MockWorker) Pause(arg0 context.Context, arg1 string, arg2 ControlOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockWorkerMockRecorder) Pause(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockWorker)(nil).Pause), arg0, arg1, arg2)
}

// Resume mocks base method.
func (m *MockWorker) Resume(arg0 context.Context, arg1 string, arg2 ControlOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockWorkerMockRecorder) Resume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockWorker)(nil).Resume), arg0, arg1, arg2)
}

// ResumeMany mocks base method.
func (m *MockWorker) ResumeMany(arg0 context.Context, arg1 []string, arg2 ControlOptions) []IdentifiableError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeMany", arg0, arg1, arg2)
	ret0, _ := ret[0].([]IdentifiableError)
	return ret0
}

// ResumeMany indicates an expected call of ResumeMany.
func (mr *MockWorkerMockRecorder) ResumeMany(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeMany", reflect.TypeOf((*MockWorker)(nil).ResumeMany), arg0, arg1, arg2)
}

// Service mocks base method.
func (m *MockWorker) Service(arg0 context.Context, arg1 ServiceRequest) (*ServiceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", arg0, arg1)
	ret0, _ := ret[0].(*ServiceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Service indicates an expected call of Service.
func (mr *MockWorkerMockRecorder) Service(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockWorker)(nil).Service), arg0, arg1)
}

// StatusNotifications mocks base method.
func (m *MockWorker) StatusNotifications(arg0 context.Context, arg1 string, arg2 StatusNotificationsOptions) StatusNotificationsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusNotifications", arg0, arg1, arg2)
	ret0, _ := ret[0].(StatusNotificationsWatcher)
	return ret0
}

// StatusNotifications indicates an expected call of StatusNotifications.
func (mr *MockWorkerMockRecorder) StatusNotifications(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusNotifications", reflect.TypeOf((*MockWorker)(nil).StatusNotifications), arg0, arg1, arg2)
}

// Summary mocks base method.
func (m *MockWorker) Summary(arg0 context.Context, arg1 string, arg2 GetOptions) (*SummaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary", arg0, arg1, arg2)
	ret0, _ := ret[0].(*SummaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summary indicates an expected call of Summary.
func (mr *MockWorkerMockRecorder) Summary(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockWorker)(nil).Summary), arg0, arg1, arg2)
}
