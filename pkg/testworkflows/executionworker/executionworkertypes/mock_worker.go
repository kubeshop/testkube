// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/testworkflows/executionworker/executionworkertypes (interfaces: Worker)
//
// Generated by this command:
//
//	mockgen -destination=./mock_worker.go -package=executionworkertypes github.com/kubeshop/testkube/pkg/testworkflows/executionworker/executionworkertypes Worker
//

// Package executionworkertypes is a generated GoMock package.
package executionworkertypes

import (
	context "context"
	reflect "reflect"

	utils "github.com/kubeshop/testkube/pkg/testworkflows/executionworker/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
	isgomock struct{}
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockWorker) Abort(ctx context.Context, id string, options DestroyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockWorkerMockRecorder) Abort(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockWorker)(nil).Abort), ctx, id, options)
}

// Cancel mocks base method.
func (m *MockWorker) Cancel(ctx context.Context, id string, options DestroyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockWorkerMockRecorder) Cancel(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockWorker)(nil).Cancel), ctx, id, options)
}

// Destroy mocks base method.
func (m *MockWorker) Destroy(ctx context.Context, id string, options DestroyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockWorkerMockRecorder) Destroy(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockWorker)(nil).Destroy), ctx, id, options)
}

// DestroyGroup mocks base method.
func (m *MockWorker) DestroyGroup(ctx context.Context, groupId string, options DestroyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyGroup", ctx, groupId, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyGroup indicates an expected call of DestroyGroup.
func (mr *MockWorkerMockRecorder) DestroyGroup(ctx, groupId, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyGroup", reflect.TypeOf((*MockWorker)(nil).DestroyGroup), ctx, groupId, options)
}

// Execute mocks base method.
func (m *MockWorker) Execute(ctx context.Context, request ExecuteRequest) (*ExecuteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, request)
	ret0, _ := ret[0].(*ExecuteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockWorkerMockRecorder) Execute(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockWorker)(nil).Execute), ctx, request)
}

// Finished mocks base method.
func (m *MockWorker) Finished(ctx context.Context, id string, options GetOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finished", ctx, id, options)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finished indicates an expected call of Finished.
func (mr *MockWorkerMockRecorder) Finished(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finished", reflect.TypeOf((*MockWorker)(nil).Finished), ctx, id, options)
}

// Get mocks base method.
func (m *MockWorker) Get(ctx context.Context, id string, options GetOptions) (*GetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id, options)
	ret0, _ := ret[0].(*GetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWorkerMockRecorder) Get(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorker)(nil).Get), ctx, id, options)
}

// List mocks base method.
func (m *MockWorker) List(ctx context.Context, options ListOptions) ([]ListResultItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].([]ListResultItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWorkerMockRecorder) List(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWorker)(nil).List), ctx, options)
}

// Logs mocks base method.
func (m *MockWorker) Logs(ctx context.Context, id string, options LogsOptions) utils.LogsReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", ctx, id, options)
	ret0, _ := ret[0].(utils.LogsReader)
	return ret0
}

// Logs indicates an expected call of Logs.
func (mr *MockWorkerMockRecorder) Logs(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockWorker)(nil).Logs), ctx, id, options)
}

// Notifications mocks base method.
func (m *MockWorker) Notifications(ctx context.Context, id string, options NotificationsOptions) NotificationsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notifications", ctx, id, options)
	ret0, _ := ret[0].(NotificationsWatcher)
	return ret0
}

// Notifications indicates an expected call of Notifications.
func (mr *MockWorkerMockRecorder) Notifications(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockWorker)(nil).Notifications), ctx, id, options)
}

// Pause mocks base method.
func (m *MockWorker) Pause(ctx context.Context, id string, options ControlOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockWorkerMockRecorder) Pause(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockWorker)(nil).Pause), ctx, id, options)
}

// Resume mocks base method.
func (m *MockWorker) Resume(ctx context.Context, id string, options ControlOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", ctx, id, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockWorkerMockRecorder) Resume(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockWorker)(nil).Resume), ctx, id, options)
}

// ResumeMany mocks base method.
func (m *MockWorker) ResumeMany(ctx context.Context, ids []string, options ControlOptions) []IdentifiableError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeMany", ctx, ids, options)
	ret0, _ := ret[0].([]IdentifiableError)
	return ret0
}

// ResumeMany indicates an expected call of ResumeMany.
func (mr *MockWorkerMockRecorder) ResumeMany(ctx, ids, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeMany", reflect.TypeOf((*MockWorker)(nil).ResumeMany), ctx, ids, options)
}

// Service mocks base method.
func (m *MockWorker) Service(ctx context.Context, request ServiceRequest) (*ServiceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", ctx, request)
	ret0, _ := ret[0].(*ServiceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Service indicates an expected call of Service.
func (mr *MockWorkerMockRecorder) Service(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockWorker)(nil).Service), ctx, request)
}

// StatusNotifications mocks base method.
func (m *MockWorker) StatusNotifications(ctx context.Context, id string, options StatusNotificationsOptions) StatusNotificationsWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusNotifications", ctx, id, options)
	ret0, _ := ret[0].(StatusNotificationsWatcher)
	return ret0
}

// StatusNotifications indicates an expected call of StatusNotifications.
func (mr *MockWorkerMockRecorder) StatusNotifications(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusNotifications", reflect.TypeOf((*MockWorker)(nil).StatusNotifications), ctx, id, options)
}

// Summary mocks base method.
func (m *MockWorker) Summary(ctx context.Context, id string, options GetOptions) (*SummaryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary", ctx, id, options)
	ret0, _ := ret[0].(*SummaryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summary indicates an expected call of Summary.
func (mr *MockWorkerMockRecorder) Summary(ctx, id, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockWorker)(nil).Summary), ctx, id, options)
}
