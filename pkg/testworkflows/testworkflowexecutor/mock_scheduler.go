// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/testworkflows/testworkflowexecutor (interfaces: Scheduler)
//
// Generated by this command:
//
//	mockgen -destination=./mock_scheduler.go -package=testworkflowexecutor github.com/kubeshop/testkube/pkg/testworkflows/testworkflowexecutor Scheduler
//

// Package testworkflowexecutor is a generated GoMock package.
package testworkflowexecutor

import (
	context "context"
	reflect "reflect"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	cloud "github.com/kubeshop/testkube/pkg/cloud"
	gomock "go.uber.org/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
	isgomock struct{}
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// CriticalError mocks base method.
func (m *MockScheduler) CriticalError(execution *testkube.TestWorkflowExecution, name string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CriticalError", execution, name, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// CriticalError indicates an expected call of CriticalError.
func (mr *MockSchedulerMockRecorder) CriticalError(execution, name, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CriticalError", reflect.TypeOf((*MockScheduler)(nil).CriticalError), execution, name, err)
}

// Schedule mocks base method.
func (m *MockScheduler) Schedule(ctx context.Context, sensitiveDataHandler SensitiveDataHandler, environmentId string, req *cloud.ScheduleRequest) (<-chan *testkube.TestWorkflowExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", ctx, sensitiveDataHandler, environmentId, req)
	ret0, _ := ret[0].(<-chan *testkube.TestWorkflowExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schedule indicates an expected call of Schedule.
func (mr *MockSchedulerMockRecorder) Schedule(ctx, sensitiveDataHandler, environmentId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockScheduler)(nil).Schedule), ctx, sensitiveDataHandler, environmentId, req)
}

// Start mocks base method.
func (m *MockScheduler) Start(execution *testkube.TestWorkflowExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerMockRecorder) Start(execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockScheduler)(nil).Start), execution)
}
