// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/testworkflows/testworkflowexecutor (interfaces: SensitiveDataHandler)

// Package testworkflowexecutor is a generated GoMock package.
package testworkflowexecutor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSensitiveDataHandler is a mock of SensitiveDataHandler interface.
type MockSensitiveDataHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSensitiveDataHandlerMockRecorder
}

// MockSensitiveDataHandlerMockRecorder is the mock recorder for MockSensitiveDataHandler.
type MockSensitiveDataHandlerMockRecorder struct {
	mock *MockSensitiveDataHandler
}

// NewMockSensitiveDataHandler creates a new mock instance.
func NewMockSensitiveDataHandler(ctrl *gomock.Controller) *MockSensitiveDataHandler {
	mock := &MockSensitiveDataHandler{ctrl: ctrl}
	mock.recorder = &MockSensitiveDataHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensitiveDataHandler) EXPECT() *MockSensitiveDataHandlerMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockSensitiveDataHandler) Process(arg0 *IntermediateExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockSensitiveDataHandlerMockRecorder) Process(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockSensitiveDataHandler)(nil).Process), arg0)
}

// Rollback mocks base method.
func (m *MockSensitiveDataHandler) Rollback(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSensitiveDataHandlerMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSensitiveDataHandler)(nil).Rollback), arg0)
}
