// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/testworkflows/testworkflowprocessor (interfaces: Processor)

// Package testworkflowprocessor is a generated GoMock package.
package testworkflowprocessor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/kubeshop/testkube-operator/api/testworkflows/v1"
	expressions "github.com/kubeshop/testkube/pkg/expressions"
	stage "github.com/kubeshop/testkube/pkg/testworkflows/testworkflowprocessor/stage"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Bundle mocks base method.
func (m *MockProcessor) Bundle(arg0 context.Context, arg1 *v1.TestWorkflow, arg2 BundleOptions, arg3 ...expressions.Machine) (*Bundle, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bundle", varargs...)
	ret0, _ := ret[0].(*Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bundle indicates an expected call of Bundle.
func (mr *MockProcessorMockRecorder) Bundle(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bundle", reflect.TypeOf((*MockProcessor)(nil).Bundle), varargs...)
}

// Register mocks base method.
func (m *MockProcessor) Register(arg0 func(InternalProcessor, Intermediate, stage.Container, v1.Step) (stage.Stage, error)) Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(Processor)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockProcessorMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockProcessor)(nil).Register), arg0)
}
