// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/pkg/testworkflows/testworkflowprocessor (interfaces: InternalProcessor)
//
// Generated by this command:
//
//	mockgen -destination=./mock_internalprocessor.go -package=testworkflowprocessor github.com/kubeshop/testkube/pkg/testworkflows/testworkflowprocessor InternalProcessor
//

// Package testworkflowprocessor is a generated GoMock package.
package testworkflowprocessor

import (
	reflect "reflect"

	v1 "github.com/kubeshop/testkube-operator/api/testworkflows/v1"
	stage "github.com/kubeshop/testkube/pkg/testworkflows/testworkflowprocessor/stage"
	gomock "go.uber.org/mock/gomock"
)

// MockInternalProcessor is a mock of InternalProcessor interface.
type MockInternalProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockInternalProcessorMockRecorder
	isgomock struct{}
}

// MockInternalProcessorMockRecorder is the mock recorder for MockInternalProcessor.
type MockInternalProcessorMockRecorder struct {
	mock *MockInternalProcessor
}

// NewMockInternalProcessor creates a new mock instance.
func NewMockInternalProcessor(ctrl *gomock.Controller) *MockInternalProcessor {
	mock := &MockInternalProcessor{ctrl: ctrl}
	mock.recorder = &MockInternalProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalProcessor) EXPECT() *MockInternalProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockInternalProcessor) Process(layer Intermediate, container stage.Container, step v1.Step) (stage.Stage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", layer, container, step)
	ret0, _ := ret[0].(stage.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockInternalProcessorMockRecorder) Process(layer, container, step any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockInternalProcessor)(nil).Process), layer, container, step)
}
