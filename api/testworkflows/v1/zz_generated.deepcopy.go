//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	commonv1 "github.com/kubeshop/testkube/api/common/v1"
	"github.com/kubeshop/testkube/api/tests/v3"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/util/intstr"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ArtifactCompression) DeepCopyInto(out *ArtifactCompression) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ArtifactCompression.
func (in *ArtifactCompression) DeepCopy() *ArtifactCompression {
	if in == nil {
		return nil
	}
	out := new(ArtifactCompression)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConcurrencyPolicy) DeepCopyInto(out *ConcurrencyPolicy) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConcurrencyPolicy.
func (in *ConcurrencyPolicy) DeepCopy() *ConcurrencyPolicy {
	if in == nil {
		return nil
	}
	out := new(ConcurrencyPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerConfig) DeepCopyInto(out *ContainerConfig) {
	*out = *in
	if in.WorkingDir != nil {
		in, out := &in.WorkingDir, &out.WorkingDir
		*out = new(string)
		**out = **in
	}
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]EnvVar, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnvFrom != nil {
		in, out := &in.EnvFrom, &out.EnvFrom
		*out = make([]corev1.EnvFromSource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(Resources)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityContext != nil {
		in, out := &in.SecurityContext, &out.SecurityContext
		*out = new(corev1.SecurityContext)
		(*in).DeepCopyInto(*out)
	}
	if in.VolumeMounts != nil {
		in, out := &in.VolumeMounts, &out.VolumeMounts
		*out = make([]corev1.VolumeMount, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerConfig.
func (in *ContainerConfig) DeepCopy() *ContainerConfig {
	if in == nil {
		return nil
	}
	out := new(ContainerConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Content) DeepCopyInto(out *Content) {
	*out = *in
	if in.Git != nil {
		in, out := &in.Git, &out.Git
		*out = new(ContentGit)
		(*in).DeepCopyInto(*out)
	}
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = make([]ContentFile, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Tarball != nil {
		in, out := &in.Tarball, &out.Tarball
		*out = make([]ContentTarball, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Content.
func (in *Content) DeepCopy() *Content {
	if in == nil {
		return nil
	}
	out := new(Content)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentFile) DeepCopyInto(out *ContentFile) {
	*out = *in
	if in.ContentFrom != nil {
		in, out := &in.ContentFrom, &out.ContentFrom
		*out = new(corev1.EnvVarSource)
		(*in).DeepCopyInto(*out)
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentFile.
func (in *ContentFile) DeepCopy() *ContentFile {
	if in == nil {
		return nil
	}
	out := new(ContentFile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentGit) DeepCopyInto(out *ContentGit) {
	*out = *in
	if in.UsernameFrom != nil {
		in, out := &in.UsernameFrom, &out.UsernameFrom
		*out = new(corev1.EnvVarSource)
		(*in).DeepCopyInto(*out)
	}
	if in.TokenFrom != nil {
		in, out := &in.TokenFrom, &out.TokenFrom
		*out = new(corev1.EnvVarSource)
		(*in).DeepCopyInto(*out)
	}
	if in.SshKeyFrom != nil {
		in, out := &in.SshKeyFrom, &out.SshKeyFrom
		*out = new(corev1.EnvVarSource)
		(*in).DeepCopyInto(*out)
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentGit.
func (in *ContentGit) DeepCopy() *ContentGit {
	if in == nil {
		return nil
	}
	out := new(ContentGit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContentTarball) DeepCopyInto(out *ContentTarball) {
	*out = *in
	if in.Mount != nil {
		in, out := &in.Mount, &out.Mount
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContentTarball.
func (in *ContentTarball) DeepCopy() *ContentTarball {
	if in == nil {
		return nil
	}
	out := new(ContentTarball)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CronJobConfig) DeepCopyInto(out *CronJobConfig) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]intstr.IntOrString, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(commonv1.Target)
		(*in).DeepCopyInto(*out)
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CronJobConfig.
func (in *CronJobConfig) DeepCopy() *CronJobConfig {
	if in == nil {
		return nil
	}
	out := new(CronJobConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvVar) DeepCopyInto(out *EnvVar) {
	*out = *in
	in.EnvVar.DeepCopyInto(&out.EnvVar)
	if in.Global != nil {
		in, out := &in.Global, &out.Global
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvVar.
func (in *EnvVar) DeepCopy() *EnvVar {
	if in == nil {
		return nil
	}
	out := new(EnvVar)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Event) DeepCopyInto(out *Event) {
	*out = *in
	if in.Cronjob != nil {
		in, out := &in.Cronjob, &out.Cronjob
		*out = new(CronJobConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Event.
func (in *Event) DeepCopy() *Event {
	if in == nil {
		return nil
	}
	out := new(Event)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndependentServiceSpec) DeepCopyInto(out *IndependentServiceSpec) {
	*out = *in
	in.StepExecuteStrategy.DeepCopyInto(&out.StepExecuteStrategy)
	if in.Logs != nil {
		in, out := &in.Logs, &out.Logs
		*out = new(string)
		**out = **in
	}
	if in.Transfer != nil {
		in, out := &in.Transfer, &out.Transfer
		*out = make([]StepParallelTransfer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(Content)
		(*in).DeepCopyInto(*out)
	}
	if in.Pod != nil {
		in, out := &in.Pod, &out.Pod
		*out = new(PodConfig)
		(*in).DeepCopyInto(*out)
	}
	in.StepRun.DeepCopyInto(&out.StepRun)
	if in.ReadinessProbe != nil {
		in, out := &in.ReadinessProbe, &out.ReadinessProbe
		*out = new(corev1.Probe)
		(*in).DeepCopyInto(*out)
	}
	if in.Pvcs != nil {
		in, out := &in.Pvcs, &out.Pvcs
		*out = make(map[string]corev1.PersistentVolumeClaimSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndependentServiceSpec.
func (in *IndependentServiceSpec) DeepCopy() *IndependentServiceSpec {
	if in == nil {
		return nil
	}
	out := new(IndependentServiceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndependentStep) DeepCopyInto(out *IndependentStep) {
	*out = *in
	in.StepMeta.DeepCopyInto(&out.StepMeta)
	in.StepControl.DeepCopyInto(&out.StepControl)
	in.StepSource.DeepCopyInto(&out.StepSource)
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make(map[string]IndependentServiceSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	in.StepDefaults.DeepCopyInto(&out.StepDefaults)
	if in.Setup != nil {
		in, out := &in.Setup, &out.Setup
		*out = make([]IndependentStep, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.StepOperations.DeepCopyInto(&out.StepOperations)
	if in.Parallel != nil {
		in, out := &in.Parallel, &out.Parallel
		*out = new(IndependentStepParallel)
		(*in).DeepCopyInto(*out)
	}
	if in.Steps != nil {
		in, out := &in.Steps, &out.Steps
		*out = make([]IndependentStep, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndependentStep.
func (in *IndependentStep) DeepCopy() *IndependentStep {
	if in == nil {
		return nil
	}
	out := new(IndependentStep)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndependentStepParallel) DeepCopyInto(out *IndependentStepParallel) {
	*out = *in
	in.StepExecuteStrategy.DeepCopyInto(&out.StepExecuteStrategy)
	if in.Logs != nil {
		in, out := &in.Logs, &out.Logs
		*out = new(string)
		**out = **in
	}
	if in.Transfer != nil {
		in, out := &in.Transfer, &out.Transfer
		*out = make([]StepParallelTransfer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Fetch != nil {
		in, out := &in.Fetch, &out.Fetch
		*out = make([]StepParallelFetch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.TestWorkflowTemplateSpec.DeepCopyInto(&out.TestWorkflowTemplateSpec)
	in.StepControl.DeepCopyInto(&out.StepControl)
	in.StepOperations.DeepCopyInto(&out.StepOperations)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndependentStepParallel.
func (in *IndependentStepParallel) DeepCopy() *IndependentStepParallel {
	if in == nil {
		return nil
	}
	out := new(IndependentStepParallel)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobConfig) DeepCopyInto(out *JobConfig) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ActiveDeadlineSeconds != nil {
		in, out := &in.ActiveDeadlineSeconds, &out.ActiveDeadlineSeconds
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobConfig.
func (in *JobConfig) DeepCopy() *JobConfig {
	if in == nil {
		return nil
	}
	out := new(JobConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationsConfig) DeepCopyInto(out *NotificationsConfig) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationsConfig.
func (in *NotificationsConfig) DeepCopy() *NotificationsConfig {
	if in == nil {
		return nil
	}
	out := new(NotificationsConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterNumberSchema) DeepCopyInto(out *ParameterNumberSchema) {
	*out = *in
	if in.Minimum != nil {
		in, out := &in.Minimum, &out.Minimum
		*out = new(int64)
		**out = **in
	}
	if in.Maximum != nil {
		in, out := &in.Maximum, &out.Maximum
		*out = new(int64)
		**out = **in
	}
	if in.ExclusiveMinimum != nil {
		in, out := &in.ExclusiveMinimum, &out.ExclusiveMinimum
		*out = new(int64)
		**out = **in
	}
	if in.ExclusiveMaximum != nil {
		in, out := &in.ExclusiveMaximum, &out.ExclusiveMaximum
		*out = new(int64)
		**out = **in
	}
	if in.MultipleOf != nil {
		in, out := &in.MultipleOf, &out.MultipleOf
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterNumberSchema.
func (in *ParameterNumberSchema) DeepCopy() *ParameterNumberSchema {
	if in == nil {
		return nil
	}
	out := new(ParameterNumberSchema)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterSchema) DeepCopyInto(out *ParameterSchema) {
	*out = *in
	if in.Enum != nil {
		in, out := &in.Enum, &out.Enum
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Example != nil {
		in, out := &in.Example, &out.Example
		*out = new(intstr.IntOrString)
		**out = **in
	}
	if in.Default != nil {
		in, out := &in.Default, &out.Default
		*out = new(intstr.IntOrString)
		**out = **in
	}
	in.ParameterStringSchema.DeepCopyInto(&out.ParameterStringSchema)
	in.ParameterNumberSchema.DeepCopyInto(&out.ParameterNumberSchema)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterSchema.
func (in *ParameterSchema) DeepCopy() *ParameterSchema {
	if in == nil {
		return nil
	}
	out := new(ParameterSchema)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterStringSchema) DeepCopyInto(out *ParameterStringSchema) {
	*out = *in
	if in.MinLength != nil {
		in, out := &in.MinLength, &out.MinLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterStringSchema.
func (in *ParameterStringSchema) DeepCopy() *ParameterStringSchema {
	if in == nil {
		return nil
	}
	out := new(ParameterStringSchema)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodConfig) DeepCopyInto(out *PodConfig) {
	*out = *in
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = make([]corev1.LocalObjectReference, len(*in))
		copy(*out, *in)
	}
	if in.NodeSelector != nil {
		in, out := &in.NodeSelector, &out.NodeSelector
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]corev1.Volume, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ActiveDeadlineSeconds != nil {
		in, out := &in.ActiveDeadlineSeconds, &out.ActiveDeadlineSeconds
		*out = new(int64)
		**out = **in
	}
	if in.SecurityContext != nil {
		in, out := &in.SecurityContext, &out.SecurityContext
		*out = new(corev1.PodSecurityContext)
		(*in).DeepCopyInto(*out)
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(corev1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]corev1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostAliases != nil {
		in, out := &in.HostAliases, &out.HostAliases
		*out = make([]corev1.HostAlias, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(int32)
		**out = **in
	}
	if in.DNSConfig != nil {
		in, out := &in.DNSConfig, &out.DNSConfig
		*out = new(corev1.PodDNSConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.PreemptionPolicy != nil {
		in, out := &in.PreemptionPolicy, &out.PreemptionPolicy
		*out = new(corev1.PreemptionPolicy)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]corev1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SchedulingGates != nil {
		in, out := &in.SchedulingGates, &out.SchedulingGates
		*out = make([]corev1.PodSchedulingGate, len(*in))
		copy(*out, *in)
	}
	if in.ResourceClaims != nil {
		in, out := &in.ResourceClaims, &out.ResourceClaims
		*out = make([]corev1.PodResourceClaim, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostPID != nil {
		in, out := &in.HostPID, &out.HostPID
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodConfig.
func (in *PodConfig) DeepCopy() *PodConfig {
	if in == nil {
		return nil
	}
	out := new(PodConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Resources) DeepCopyInto(out *Resources) {
	*out = *in
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = make(map[corev1.ResourceName]intstr.IntOrString, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Requests != nil {
		in, out := &in.Requests, &out.Requests
		*out = make(map[corev1.ResourceName]intstr.IntOrString, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Resources.
func (in *Resources) DeepCopy() *Resources {
	if in == nil {
		return nil
	}
	out := new(Resources)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetryPolicy) DeepCopyInto(out *RetryPolicy) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetryPolicy.
func (in *RetryPolicy) DeepCopy() *RetryPolicy {
	if in == nil {
		return nil
	}
	out := new(RetryPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceSpec) DeepCopyInto(out *ServiceSpec) {
	*out = *in
	if in.Use != nil {
		in, out := &in.Use, &out.Use
		*out = make([]TemplateRef, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.IndependentServiceSpec.DeepCopyInto(&out.IndependentServiceSpec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceSpec.
func (in *ServiceSpec) DeepCopy() *ServiceSpec {
	if in == nil {
		return nil
	}
	out := new(ServiceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Step) DeepCopyInto(out *Step) {
	*out = *in
	in.StepMeta.DeepCopyInto(&out.StepMeta)
	in.StepControl.DeepCopyInto(&out.StepControl)
	if in.Use != nil {
		in, out := &in.Use, &out.Use
		*out = make([]TemplateRef, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.StepSource.DeepCopyInto(&out.StepSource)
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make(map[string]ServiceSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	in.StepDefaults.DeepCopyInto(&out.StepDefaults)
	if in.Setup != nil {
		in, out := &in.Setup, &out.Setup
		*out = make([]Step, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.StepOperations.DeepCopyInto(&out.StepOperations)
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(TemplateRef)
		(*in).DeepCopyInto(*out)
	}
	if in.Parallel != nil {
		in, out := &in.Parallel, &out.Parallel
		*out = new(StepParallel)
		(*in).DeepCopyInto(*out)
	}
	if in.Steps != nil {
		in, out := &in.Steps, &out.Steps
		*out = make([]Step, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Step.
func (in *Step) DeepCopy() *Step {
	if in == nil {
		return nil
	}
	out := new(Step)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepArtifacts) DeepCopyInto(out *StepArtifacts) {
	*out = *in
	if in.WorkingDir != nil {
		in, out := &in.WorkingDir, &out.WorkingDir
		*out = new(string)
		**out = **in
	}
	if in.Compress != nil {
		in, out := &in.Compress, &out.Compress
		*out = new(ArtifactCompression)
		**out = **in
	}
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepArtifacts.
func (in *StepArtifacts) DeepCopy() *StepArtifacts {
	if in == nil {
		return nil
	}
	out := new(StepArtifacts)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepControl) DeepCopyInto(out *StepControl) {
	*out = *in
	if in.Retry != nil {
		in, out := &in.Retry, &out.Retry
		*out = new(RetryPolicy)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepControl.
func (in *StepControl) DeepCopy() *StepControl {
	if in == nil {
		return nil
	}
	out := new(StepControl)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepDefaults) DeepCopyInto(out *StepDefaults) {
	*out = *in
	if in.Container != nil {
		in, out := &in.Container, &out.Container
		*out = new(ContainerConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkingDir != nil {
		in, out := &in.WorkingDir, &out.WorkingDir
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepDefaults.
func (in *StepDefaults) DeepCopy() *StepDefaults {
	if in == nil {
		return nil
	}
	out := new(StepDefaults)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepExecute) DeepCopyInto(out *StepExecute) {
	*out = *in
	if in.Tests != nil {
		in, out := &in.Tests, &out.Tests
		*out = make([]StepExecuteTest, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Workflows != nil {
		in, out := &in.Workflows, &out.Workflows
		*out = make([]StepExecuteWorkflow, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepExecute.
func (in *StepExecute) DeepCopy() *StepExecute {
	if in == nil {
		return nil
	}
	out := new(StepExecute)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepExecuteStrategy) DeepCopyInto(out *StepExecuteStrategy) {
	*out = *in
	if in.Matrix != nil {
		in, out := &in.Matrix, &out.Matrix
		*out = make(map[string]DynamicList, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(intstr.IntOrString)
		**out = **in
	}
	if in.MaxCount != nil {
		in, out := &in.MaxCount, &out.MaxCount
		*out = new(intstr.IntOrString)
		**out = **in
	}
	if in.Shards != nil {
		in, out := &in.Shards, &out.Shards
		*out = make(map[string]DynamicList, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepExecuteStrategy.
func (in *StepExecuteStrategy) DeepCopy() *StepExecuteStrategy {
	if in == nil {
		return nil
	}
	out := new(StepExecuteStrategy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepExecuteTest) DeepCopyInto(out *StepExecuteTest) {
	*out = *in
	in.StepExecuteStrategy.DeepCopyInto(&out.StepExecuteStrategy)
	if in.Tarball != nil {
		in, out := &in.Tarball, &out.Tarball
		*out = make(map[string]TarballRequest, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.ExecutionRequest != nil {
		in, out := &in.ExecutionRequest, &out.ExecutionRequest
		*out = new(TestExecutionRequest)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepExecuteTest.
func (in *StepExecuteTest) DeepCopy() *StepExecuteTest {
	if in == nil {
		return nil
	}
	out := new(StepExecuteTest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepExecuteWorkflow) DeepCopyInto(out *StepExecuteWorkflow) {
	*out = *in
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(metav1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
	in.StepExecuteStrategy.DeepCopyInto(&out.StepExecuteStrategy)
	if in.Tarball != nil {
		in, out := &in.Tarball, &out.Tarball
		*out = make(map[string]TarballRequest, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]intstr.IntOrString, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(commonv1.Target)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepExecuteWorkflow.
func (in *StepExecuteWorkflow) DeepCopy() *StepExecuteWorkflow {
	if in == nil {
		return nil
	}
	out := new(StepExecuteWorkflow)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepMeta) DeepCopyInto(out *StepMeta) {
	*out = *in
	if in.Pure != nil {
		in, out := &in.Pure, &out.Pure
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepMeta.
func (in *StepMeta) DeepCopy() *StepMeta {
	if in == nil {
		return nil
	}
	out := new(StepMeta)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepOperations) DeepCopyInto(out *StepOperations) {
	*out = *in
	if in.Run != nil {
		in, out := &in.Run, &out.Run
		*out = new(StepRun)
		(*in).DeepCopyInto(*out)
	}
	if in.Execute != nil {
		in, out := &in.Execute, &out.Execute
		*out = new(StepExecute)
		(*in).DeepCopyInto(*out)
	}
	if in.Artifacts != nil {
		in, out := &in.Artifacts, &out.Artifacts
		*out = new(StepArtifacts)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepOperations.
func (in *StepOperations) DeepCopy() *StepOperations {
	if in == nil {
		return nil
	}
	out := new(StepOperations)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepParallel) DeepCopyInto(out *StepParallel) {
	*out = *in
	in.StepExecuteStrategy.DeepCopyInto(&out.StepExecuteStrategy)
	if in.Logs != nil {
		in, out := &in.Logs, &out.Logs
		*out = new(string)
		**out = **in
	}
	if in.Transfer != nil {
		in, out := &in.Transfer, &out.Transfer
		*out = make([]StepParallelTransfer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Fetch != nil {
		in, out := &in.Fetch, &out.Fetch
		*out = make([]StepParallelFetch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.StepControl.DeepCopyInto(&out.StepControl)
	in.StepOperations.DeepCopyInto(&out.StepOperations)
	if in.Template != nil {
		in, out := &in.Template, &out.Template
		*out = new(TemplateRef)
		(*in).DeepCopyInto(*out)
	}
	if in.Use != nil {
		in, out := &in.Use, &out.Use
		*out = make([]TemplateRef, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]Event, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.System != nil {
		in, out := &in.System, &out.System
		*out = new(TestWorkflowSystem)
		(*in).DeepCopyInto(*out)
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]ParameterSchema, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(Content)
		(*in).DeepCopyInto(*out)
	}
	if in.Container != nil {
		in, out := &in.Container, &out.Container
		*out = new(ContainerConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Job != nil {
		in, out := &in.Job, &out.Job
		*out = new(JobConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Pod != nil {
		in, out := &in.Pod, &out.Pod
		*out = new(PodConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Notifications != nil {
		in, out := &in.Notifications, &out.Notifications
		*out = new(NotificationsConfig)
		**out = **in
	}
	if in.Execution != nil {
		in, out := &in.Execution, &out.Execution
		*out = new(TestWorkflowTagSchema)
		(*in).DeepCopyInto(*out)
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make(map[string]ServiceSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Setup != nil {
		in, out := &in.Setup, &out.Setup
		*out = make([]Step, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Steps != nil {
		in, out := &in.Steps, &out.Steps
		*out = make([]Step, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.After != nil {
		in, out := &in.After, &out.After
		*out = make([]Step, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pvcs != nil {
		in, out := &in.Pvcs, &out.Pvcs
		*out = make(map[string]corev1.PersistentVolumeClaimSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepParallel.
func (in *StepParallel) DeepCopy() *StepParallel {
	if in == nil {
		return nil
	}
	out := new(StepParallel)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepParallelFetch) DeepCopyInto(out *StepParallelFetch) {
	*out = *in
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = (*in).DeepCopy()
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepParallelFetch.
func (in *StepParallelFetch) DeepCopy() *StepParallelFetch {
	if in == nil {
		return nil
	}
	out := new(StepParallelFetch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepParallelTransfer) DeepCopyInto(out *StepParallelTransfer) {
	*out = *in
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = (*in).DeepCopy()
	}
	if in.Mount != nil {
		in, out := &in.Mount, &out.Mount
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepParallelTransfer.
func (in *StepParallelTransfer) DeepCopy() *StepParallelTransfer {
	if in == nil {
		return nil
	}
	out := new(StepParallelTransfer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepRun) DeepCopyInto(out *StepRun) {
	*out = *in
	in.ContainerConfig.DeepCopyInto(&out.ContainerConfig)
	if in.Shell != nil {
		in, out := &in.Shell, &out.Shell
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepRun.
func (in *StepRun) DeepCopy() *StepRun {
	if in == nil {
		return nil
	}
	out := new(StepRun)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StepSource) DeepCopyInto(out *StepSource) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(Content)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StepSource.
func (in *StepSource) DeepCopy() *StepSource {
	if in == nil {
		return nil
	}
	out := new(StepSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TarballRequest) DeepCopyInto(out *TarballRequest) {
	*out = *in
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = (*in).DeepCopy()
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TarballRequest.
func (in *TarballRequest) DeepCopy() *TarballRequest {
	if in == nil {
		return nil
	}
	out := new(TarballRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TemplateRef) DeepCopyInto(out *TemplateRef) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]intstr.IntOrString, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TemplateRef.
func (in *TemplateRef) DeepCopy() *TemplateRef {
	if in == nil {
		return nil
	}
	out := new(TemplateRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestExecutionRequest) DeepCopyInto(out *TestExecutionRequest) {
	*out = *in
	if in.ExecutionLabels != nil {
		in, out := &in.ExecutionLabels, &out.ExecutionLabels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Variables != nil {
		in, out := &in.Variables, &out.Variables
		*out = make(map[string]v3.Variable, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = make([]corev1.LocalObjectReference, len(*in))
		copy(*out, *in)
	}
	if in.ArtifactRequest != nil {
		in, out := &in.ArtifactRequest, &out.ArtifactRequest
		*out = new(v3.ArtifactRequest)
		(*in).DeepCopyInto(*out)
	}
	if in.EnvConfigMaps != nil {
		in, out := &in.EnvConfigMaps, &out.EnvConfigMaps
		*out = make([]v3.EnvReference, len(*in))
		copy(*out, *in)
	}
	if in.EnvSecrets != nil {
		in, out := &in.EnvSecrets, &out.EnvSecrets
		*out = make([]v3.EnvReference, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestExecutionRequest.
func (in *TestExecutionRequest) DeepCopy() *TestExecutionRequest {
	if in == nil {
		return nil
	}
	out := new(TestExecutionRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflow) DeepCopyInto(out *TestWorkflow) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflow.
func (in *TestWorkflow) DeepCopy() *TestWorkflow {
	if in == nil {
		return nil
	}
	out := new(TestWorkflow)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TestWorkflow) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecution) DeepCopyInto(out *TestWorkflowExecution) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecution.
func (in *TestWorkflowExecution) DeepCopy() *TestWorkflowExecution {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecution)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TestWorkflowExecution) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionDetails) DeepCopyInto(out *TestWorkflowExecutionDetails) {
	*out = *in
	in.ScheduledAt.DeepCopyInto(&out.ScheduledAt)
	in.StatusAt.DeepCopyInto(&out.StatusAt)
	if in.Signature != nil {
		in, out := &in.Signature, &out.Signature
		*out = make([]TestWorkflowSignature, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Result != nil {
		in, out := &in.Result, &out.Result
		*out = new(TestWorkflowResult)
		(*in).DeepCopyInto(*out)
	}
	if in.Output != nil {
		in, out := &in.Output, &out.Output
		*out = make([]TestWorkflowOutput, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Reports != nil {
		in, out := &in.Reports, &out.Reports
		*out = make([]TestWorkflowReport, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourceAggregations != nil {
		in, out := &in.ResourceAggregations, &out.ResourceAggregations
		*out = new(TestWorkflowExecutionResourceAggregationsReport)
		(*in).DeepCopyInto(*out)
	}
	if in.Workflow != nil {
		in, out := &in.Workflow, &out.Workflow
		*out = new(TestWorkflow)
		(*in).DeepCopyInto(*out)
	}
	if in.ResolvedWorkflow != nil {
		in, out := &in.ResolvedWorkflow, &out.ResolvedWorkflow
		*out = new(TestWorkflow)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RunningContext != nil {
		in, out := &in.RunningContext, &out.RunningContext
		*out = new(TestWorkflowRunningContext)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionDetails.
func (in *TestWorkflowExecutionDetails) DeepCopy() *TestWorkflowExecutionDetails {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionDetails)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionHealth) DeepCopyInto(out *TestWorkflowExecutionHealth) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionHealth.
func (in *TestWorkflowExecutionHealth) DeepCopy() *TestWorkflowExecutionHealth {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionHealth)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionList) DeepCopyInto(out *TestWorkflowExecutionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TestWorkflowExecution, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionList.
func (in *TestWorkflowExecutionList) DeepCopy() *TestWorkflowExecutionList {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TestWorkflowExecutionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionRequest) DeepCopyInto(out *TestWorkflowExecutionRequest) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]intstr.IntOrString, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RunningContext != nil {
		in, out := &in.RunningContext, &out.RunningContext
		*out = new(TestWorkflowRunningContext)
		(*in).DeepCopyInto(*out)
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(commonv1.Target)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionRequest.
func (in *TestWorkflowExecutionRequest) DeepCopy() *TestWorkflowExecutionRequest {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionResourceAggregations) DeepCopyInto(out *TestWorkflowExecutionResourceAggregations) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionResourceAggregations.
func (in *TestWorkflowExecutionResourceAggregations) DeepCopy() *TestWorkflowExecutionResourceAggregations {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionResourceAggregations)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in TestWorkflowExecutionResourceAggregationsByField) DeepCopyInto(out *TestWorkflowExecutionResourceAggregationsByField) {
	{
		in := &in
		*out = make(TestWorkflowExecutionResourceAggregationsByField, len(*in))
		for key, val := range *in {
			var outVal *TestWorkflowExecutionResourceAggregations
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(TestWorkflowExecutionResourceAggregations)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionResourceAggregationsByField.
func (in TestWorkflowExecutionResourceAggregationsByField) DeepCopy() TestWorkflowExecutionResourceAggregationsByField {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionResourceAggregationsByField)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in TestWorkflowExecutionResourceAggregationsByMeasurement) DeepCopyInto(out *TestWorkflowExecutionResourceAggregationsByMeasurement) {
	{
		in := &in
		*out = make(TestWorkflowExecutionResourceAggregationsByMeasurement, len(*in))
		for key, val := range *in {
			var outVal map[string]*TestWorkflowExecutionResourceAggregations
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(TestWorkflowExecutionResourceAggregationsByField, len(*in))
				for key, val := range *in {
					var outVal *TestWorkflowExecutionResourceAggregations
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = new(TestWorkflowExecutionResourceAggregations)
						**out = **in
					}
					(*out)[key] = outVal
				}
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionResourceAggregationsByMeasurement.
func (in TestWorkflowExecutionResourceAggregationsByMeasurement) DeepCopy() TestWorkflowExecutionResourceAggregationsByMeasurement {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionResourceAggregationsByMeasurement)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionResourceAggregationsReport) DeepCopyInto(out *TestWorkflowExecutionResourceAggregationsReport) {
	*out = *in
	if in.Global != nil {
		in, out := &in.Global, &out.Global
		*out = make(TestWorkflowExecutionResourceAggregationsByMeasurement, len(*in))
		for key, val := range *in {
			var outVal map[string]*TestWorkflowExecutionResourceAggregations
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(TestWorkflowExecutionResourceAggregationsByField, len(*in))
				for key, val := range *in {
					var outVal *TestWorkflowExecutionResourceAggregations
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = new(TestWorkflowExecutionResourceAggregations)
						**out = **in
					}
					(*out)[key] = outVal
				}
			}
			(*out)[key] = outVal
		}
	}
	if in.Step != nil {
		in, out := &in.Step, &out.Step
		*out = make([]*TestWorkflowExecutionStepResourceAggregations, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(TestWorkflowExecutionStepResourceAggregations)
				(*in).DeepCopyInto(*out)
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionResourceAggregationsReport.
func (in *TestWorkflowExecutionResourceAggregationsReport) DeepCopy() *TestWorkflowExecutionResourceAggregationsReport {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionResourceAggregationsReport)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionSpec) DeepCopyInto(out *TestWorkflowExecutionSpec) {
	*out = *in
	if in.TestWorkflow != nil {
		in, out := &in.TestWorkflow, &out.TestWorkflow
		*out = new(corev1.LocalObjectReference)
		**out = **in
	}
	if in.ExecutionRequest != nil {
		in, out := &in.ExecutionRequest, &out.ExecutionRequest
		*out = new(TestWorkflowExecutionRequest)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionSpec.
func (in *TestWorkflowExecutionSpec) DeepCopy() *TestWorkflowExecutionSpec {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionStatus) DeepCopyInto(out *TestWorkflowExecutionStatus) {
	*out = *in
	if in.LatestExecution != nil {
		in, out := &in.LatestExecution, &out.LatestExecution
		*out = new(TestWorkflowExecutionDetails)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionStatus.
func (in *TestWorkflowExecutionStatus) DeepCopy() *TestWorkflowExecutionStatus {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionStepResourceAggregations) DeepCopyInto(out *TestWorkflowExecutionStepResourceAggregations) {
	*out = *in
	if in.Aggregations != nil {
		in, out := &in.Aggregations, &out.Aggregations
		*out = make(TestWorkflowExecutionResourceAggregationsByMeasurement, len(*in))
		for key, val := range *in {
			var outVal map[string]*TestWorkflowExecutionResourceAggregations
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = make(TestWorkflowExecutionResourceAggregationsByField, len(*in))
				for key, val := range *in {
					var outVal *TestWorkflowExecutionResourceAggregations
					if val == nil {
						(*out)[key] = nil
					} else {
						inVal := (*in)[key]
						in, out := &inVal, &outVal
						*out = new(TestWorkflowExecutionResourceAggregations)
						**out = **in
					}
					(*out)[key] = outVal
				}
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionStepResourceAggregations.
func (in *TestWorkflowExecutionStepResourceAggregations) DeepCopy() *TestWorkflowExecutionStepResourceAggregations {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionStepResourceAggregations)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowExecutionSummary) DeepCopyInto(out *TestWorkflowExecutionSummary) {
	*out = *in
	in.ScheduledAt.DeepCopyInto(&out.ScheduledAt)
	in.StatusAt.DeepCopyInto(&out.StatusAt)
	if in.Result != nil {
		in, out := &in.Result, &out.Result
		*out = new(TestWorkflowResultSummary)
		(*in).DeepCopyInto(*out)
	}
	if in.Workflow != nil {
		in, out := &in.Workflow, &out.Workflow
		*out = new(TestWorkflowSummary)
		(*in).DeepCopyInto(*out)
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RunningContext != nil {
		in, out := &in.RunningContext, &out.RunningContext
		*out = new(TestWorkflowRunningContext)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowExecutionSummary.
func (in *TestWorkflowExecutionSummary) DeepCopy() *TestWorkflowExecutionSummary {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowExecutionSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowList) DeepCopyInto(out *TestWorkflowList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TestWorkflow, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowList.
func (in *TestWorkflowList) DeepCopy() *TestWorkflowList {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TestWorkflowList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowOutput) DeepCopyInto(out *TestWorkflowOutput) {
	*out = *in
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = make(map[string]DynamicList, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowOutput.
func (in *TestWorkflowOutput) DeepCopy() *TestWorkflowOutput {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowOutput)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowPause) DeepCopyInto(out *TestWorkflowPause) {
	*out = *in
	in.PausedAt.DeepCopyInto(&out.PausedAt)
	in.ResumedAt.DeepCopyInto(&out.ResumedAt)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowPause.
func (in *TestWorkflowPause) DeepCopy() *TestWorkflowPause {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowPause)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowReport) DeepCopyInto(out *TestWorkflowReport) {
	*out = *in
	if in.Summary != nil {
		in, out := &in.Summary, &out.Summary
		*out = new(TestWorkflowReportSummary)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowReport.
func (in *TestWorkflowReport) DeepCopy() *TestWorkflowReport {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowReport)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowReportSummary) DeepCopyInto(out *TestWorkflowReportSummary) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowReportSummary.
func (in *TestWorkflowReportSummary) DeepCopy() *TestWorkflowReportSummary {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowReportSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowResult) DeepCopyInto(out *TestWorkflowResult) {
	*out = *in
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(TestWorkflowStatus)
		**out = **in
	}
	if in.PredictedStatus != nil {
		in, out := &in.PredictedStatus, &out.PredictedStatus
		*out = new(TestWorkflowStatus)
		**out = **in
	}
	in.QueuedAt.DeepCopyInto(&out.QueuedAt)
	in.StartedAt.DeepCopyInto(&out.StartedAt)
	in.FinishedAt.DeepCopyInto(&out.FinishedAt)
	if in.Pauses != nil {
		in, out := &in.Pauses, &out.Pauses
		*out = make([]TestWorkflowPause, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Initialization != nil {
		in, out := &in.Initialization, &out.Initialization
		*out = new(TestWorkflowStepResult)
		(*in).DeepCopyInto(*out)
	}
	if in.Steps != nil {
		in, out := &in.Steps, &out.Steps
		*out = make(map[string]TestWorkflowStepResult, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowResult.
func (in *TestWorkflowResult) DeepCopy() *TestWorkflowResult {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowResultSummary) DeepCopyInto(out *TestWorkflowResultSummary) {
	*out = *in
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(TestWorkflowStatus)
		**out = **in
	}
	if in.PredictedStatus != nil {
		in, out := &in.PredictedStatus, &out.PredictedStatus
		*out = new(TestWorkflowStatus)
		**out = **in
	}
	in.QueuedAt.DeepCopyInto(&out.QueuedAt)
	in.StartedAt.DeepCopyInto(&out.StartedAt)
	in.FinishedAt.DeepCopyInto(&out.FinishedAt)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowResultSummary.
func (in *TestWorkflowResultSummary) DeepCopy() *TestWorkflowResultSummary {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowResultSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowRunningContext) DeepCopyInto(out *TestWorkflowRunningContext) {
	*out = *in
	if in.Interface_ != nil {
		in, out := &in.Interface_, &out.Interface_
		*out = new(TestWorkflowRunningContextInterface)
		(*in).DeepCopyInto(*out)
	}
	if in.Actor != nil {
		in, out := &in.Actor, &out.Actor
		*out = new(TestWorkflowRunningContextActor)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowRunningContext.
func (in *TestWorkflowRunningContext) DeepCopy() *TestWorkflowRunningContext {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowRunningContext)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowRunningContextActor) DeepCopyInto(out *TestWorkflowRunningContextActor) {
	*out = *in
	if in.Type_ != nil {
		in, out := &in.Type_, &out.Type_
		*out = new(TestWorkflowRunningContextActorType)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowRunningContextActor.
func (in *TestWorkflowRunningContextActor) DeepCopy() *TestWorkflowRunningContextActor {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowRunningContextActor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowRunningContextInterface) DeepCopyInto(out *TestWorkflowRunningContextInterface) {
	*out = *in
	if in.Type_ != nil {
		in, out := &in.Type_, &out.Type_
		*out = new(TestWorkflowRunningContextInterfaceType)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowRunningContextInterface.
func (in *TestWorkflowRunningContextInterface) DeepCopy() *TestWorkflowRunningContextInterface {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowRunningContextInterface)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowSignature) DeepCopyInto(out *TestWorkflowSignature) {
	*out = *in
	if in.Children != nil {
		in, out := &in.Children, &out.Children
		*out = make([]TestWorkflowSignature, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowSignature.
func (in *TestWorkflowSignature) DeepCopy() *TestWorkflowSignature {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowSignature)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowSpec) DeepCopyInto(out *TestWorkflowSpec) {
	*out = *in
	if in.Use != nil {
		in, out := &in.Use, &out.Use
		*out = make([]TemplateRef, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.TestWorkflowSpecBase.DeepCopyInto(&out.TestWorkflowSpecBase)
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make(map[string]ServiceSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Setup != nil {
		in, out := &in.Setup, &out.Setup
		*out = make([]Step, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Steps != nil {
		in, out := &in.Steps, &out.Steps
		*out = make([]Step, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.After != nil {
		in, out := &in.After, &out.After
		*out = make([]Step, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pvcs != nil {
		in, out := &in.Pvcs, &out.Pvcs
		*out = make(map[string]corev1.PersistentVolumeClaimSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowSpec.
func (in *TestWorkflowSpec) DeepCopy() *TestWorkflowSpec {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowSpecBase) DeepCopyInto(out *TestWorkflowSpecBase) {
	*out = *in
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]Event, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.System != nil {
		in, out := &in.System, &out.System
		*out = new(TestWorkflowSystem)
		(*in).DeepCopyInto(*out)
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]ParameterSchema, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = new(Content)
		(*in).DeepCopyInto(*out)
	}
	if in.Container != nil {
		in, out := &in.Container, &out.Container
		*out = new(ContainerConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Job != nil {
		in, out := &in.Job, &out.Job
		*out = new(JobConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Pod != nil {
		in, out := &in.Pod, &out.Pod
		*out = new(PodConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Concurrency != nil {
		in, out := &in.Concurrency, &out.Concurrency
		*out = new(ConcurrencyPolicy)
		**out = **in
	}
	if in.Notifications != nil {
		in, out := &in.Notifications, &out.Notifications
		*out = new(NotificationsConfig)
		**out = **in
	}
	if in.Execution != nil {
		in, out := &in.Execution, &out.Execution
		*out = new(TestWorkflowTagSchema)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowSpecBase.
func (in *TestWorkflowSpecBase) DeepCopy() *TestWorkflowSpecBase {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowSpecBase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowStatusSummary) DeepCopyInto(out *TestWorkflowStatusSummary) {
	*out = *in
	if in.LatestExecution != nil {
		in, out := &in.LatestExecution, &out.LatestExecution
		*out = new(TestWorkflowExecutionSummary)
		(*in).DeepCopyInto(*out)
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(TestWorkflowExecutionHealth)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowStatusSummary.
func (in *TestWorkflowStatusSummary) DeepCopy() *TestWorkflowStatusSummary {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowStatusSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowStepResult) DeepCopyInto(out *TestWorkflowStepResult) {
	*out = *in
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(TestWorkflowStepStatus)
		**out = **in
	}
	in.QueuedAt.DeepCopyInto(&out.QueuedAt)
	in.StartedAt.DeepCopyInto(&out.StartedAt)
	in.FinishedAt.DeepCopyInto(&out.FinishedAt)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowStepResult.
func (in *TestWorkflowStepResult) DeepCopy() *TestWorkflowStepResult {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowStepResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowSummary) DeepCopyInto(out *TestWorkflowSummary) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowSummary.
func (in *TestWorkflowSummary) DeepCopy() *TestWorkflowSummary {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowSummary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowSystem) DeepCopyInto(out *TestWorkflowSystem) {
	*out = *in
	if in.PureByDefault != nil {
		in, out := &in.PureByDefault, &out.PureByDefault
		*out = new(bool)
		**out = **in
	}
	if in.IsolatedContainers != nil {
		in, out := &in.IsolatedContainers, &out.IsolatedContainers
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowSystem.
func (in *TestWorkflowSystem) DeepCopy() *TestWorkflowSystem {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowSystem)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowTagSchema) DeepCopyInto(out *TestWorkflowTagSchema) {
	*out = *in
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(commonv1.Target)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowTagSchema.
func (in *TestWorkflowTagSchema) DeepCopy() *TestWorkflowTagSchema {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowTagSchema)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowTemplate) DeepCopyInto(out *TestWorkflowTemplate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowTemplate.
func (in *TestWorkflowTemplate) DeepCopy() *TestWorkflowTemplate {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowTemplate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TestWorkflowTemplate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowTemplateList) DeepCopyInto(out *TestWorkflowTemplateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]TestWorkflowTemplate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowTemplateList.
func (in *TestWorkflowTemplateList) DeepCopy() *TestWorkflowTemplateList {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowTemplateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *TestWorkflowTemplateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TestWorkflowTemplateSpec) DeepCopyInto(out *TestWorkflowTemplateSpec) {
	*out = *in
	in.TestWorkflowSpecBase.DeepCopyInto(&out.TestWorkflowSpecBase)
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make(map[string]IndependentServiceSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.Setup != nil {
		in, out := &in.Setup, &out.Setup
		*out = make([]IndependentStep, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Steps != nil {
		in, out := &in.Steps, &out.Steps
		*out = make([]IndependentStep, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.After != nil {
		in, out := &in.After, &out.After
		*out = make([]IndependentStep, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pvcs != nil {
		in, out := &in.Pvcs, &out.Pvcs
		*out = make(map[string]corev1.PersistentVolumeClaimSpec, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TestWorkflowTemplateSpec.
func (in *TestWorkflowTemplateSpec) DeepCopy() *TestWorkflowTemplateSpec {
	if in == nil {
		return nil
	}
	out := new(TestWorkflowTemplateSpec)
	in.DeepCopyInto(out)
	return out
}
