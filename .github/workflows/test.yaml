name: Code build and checks

on:
  push:
    branches: [main]
    paths-ignore: ["docs/**"]
  pull_request:
    paths-ignore: ["docs/**"]
    branches: [main]

permissions:
  contents: read
  checks: write  # For test annotations
  pull-requests: write  # For PR comments

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: false

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            bin/tooling
          key: ${{ runner.os }}-go-unit-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-unit-

      - name: Show Go environment
        run: |
          go env GOCACHE
          go env GOMODCACHE
          echo "Test tool location:"
          ls -la bin/tooling/ || echo "No tools cached yet"

      - name: Unit Test
        id: unit_test
        run: make unit-tests

      - name: Unit Test Summary
        if: always()
        uses: test-summary/action@v2
        with:
          paths: |
            unit-tests.xml

      - name: Annotate Unit Tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.8.0
        with:
          test-results: unit-tests.json

      - name: Upload code coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage.out
          if-no-files-found: error
          retention-days: 1

      - name: Send coverage report to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-testkube-unit-tests
          verbose: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      mongo:
        image: bitnami/mongodb:7.0
        ports:
          - 27017:27017
      nats:
        image: bitnami/nats:2
        ports:
          - 4222:4222
          - 6222:6222
          - 8222:8222
      minio:
        image: bitnami/minio:2025
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minio99
          MINIO_ROOT_PASSWORD: minio123

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: false

      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            bin/tooling
          key: ${{ runner.os }}-go-integration-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-integration-

      - name: Show Go environment
        run: |
          go env GOCACHE
          go env GOMODCACHE
          echo "Test tool location:"
          ls -la bin/tooling/ || echo "No tools cached yet"

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1

      - name: Integration Tests
        env:
          STORAGE_ACCESSKEYID: minio99
          STORAGE_SECRETACCESSKEY: minio123
        run: make integration-tests

      - name: Integration Test Summary
        if: always()
        uses: test-summary/action@v2
        with:
          paths: |
            integration-tests.xml

      - name: Annotate Integration Tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.8.0
        with:
          test-results: integration-tests.json

      - name: Upload code coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-coverage
          path: integration-coverage.out
          if-no-files-found: error
          retention-days: 1

      - name: Send coverage report to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: ./integration-coverage.out
          flags: integrationtests
          name: codecov-testkube-integration-tests
          verbose: true
