// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeshop/testkube/internal/graphql/services (interfaces: ExecutorsService)
//
// Generated by this command:
//
//	mockgen -destination=./mock_executors.go -package=services github.com/kubeshop/testkube/internal/graphql/services ExecutorsService
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	testkube "github.com/kubeshop/testkube/pkg/api/v1/testkube"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutorsService is a mock of ExecutorsService interface.
type MockExecutorsService struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorsServiceMockRecorder
	isgomock struct{}
}

// MockExecutorsServiceMockRecorder is the mock recorder for MockExecutorsService.
type MockExecutorsServiceMockRecorder struct {
	mock *MockExecutorsService
}

// NewMockExecutorsService creates a new mock instance.
func NewMockExecutorsService(ctrl *gomock.Controller) *MockExecutorsService {
	mock := &MockExecutorsService{ctrl: ctrl}
	mock.recorder = &MockExecutorsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorsService) EXPECT() *MockExecutorsServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockExecutorsService) List(selector string) ([]testkube.ExecutorDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]testkube.ExecutorDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockExecutorsServiceMockRecorder) List(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExecutorsService)(nil).List), selector)
}

// SubscribeList mocks base method.
func (m *MockExecutorsService) SubscribeList(ctx context.Context, selector string) (<-chan []testkube.ExecutorDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeList", ctx, selector)
	ret0, _ := ret[0].(<-chan []testkube.ExecutorDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeList indicates an expected call of SubscribeList.
func (mr *MockExecutorsServiceMockRecorder) SubscribeList(ctx, selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeList", reflect.TypeOf((*MockExecutorsService)(nil).SubscribeList), ctx, selector)
}
